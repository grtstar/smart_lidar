"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class AppCleanRecord(object):
    __slots__ = ["recordId", "cleanTimeSecond", "cleanArea", "cleanMode", "cleanMethod", "finishResult", "startReason"]

    __typenames__ = ["int16_t", "int32_t", "float", "int8_t", "int8_t", "int8_t", "int8_t"]

    __dimensions__ = [None, None, None, None, None, None, None]

    def __init__(self):
        self.recordId = 0
        self.cleanTimeSecond = 0
        self.cleanArea = 0.0
        self.cleanMode = 0
        self.cleanMethod = 0
        self.finishResult = 0
        self.startReason = 0

    def encode(self):
        buf = BytesIO()
        buf.write(AppCleanRecord._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hifbbbb", self.recordId, self.cleanTimeSecond, self.cleanArea, self.cleanMode, self.cleanMethod, self.finishResult, self.startReason))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != AppCleanRecord._get_packed_fingerprint():
            raise ValueError("Decode error")
        return AppCleanRecord._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = AppCleanRecord()
        self.recordId, self.cleanTimeSecond, self.cleanArea, self.cleanMode, self.cleanMethod, self.finishResult, self.startReason = struct.unpack(">hifbbbb", buf.read(14))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if AppCleanRecord in parents: return 0
        tmphash = (0x2c90b546664bfd16) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if AppCleanRecord._packed_fingerprint is None:
            AppCleanRecord._packed_fingerprint = struct.pack(">Q", AppCleanRecord._get_hash_recursive([]))
        return AppCleanRecord._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", AppCleanRecord._get_packed_fingerprint())[0]

