"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ClearComponent(object):
    __slots__ = ["reply", "fanRpm", "gtRpm", "gtOffTime", "gtOnDegree", "gtCycle", "gtCleanDegree", "rbrushRpm", "mbrushRpm", "pumpOnTime", "pumpOffTime", "pump2OnTime", "pump2OffTime"]

    __typenames__ = ["int8_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.reply = 0
        self.fanRpm = 0
        self.gtRpm = 0
        self.gtOffTime = 0
        self.gtOnDegree = 0
        self.gtCycle = 0
        self.gtCleanDegree = 0
        self.rbrushRpm = 0
        self.mbrushRpm = 0
        self.pumpOnTime = 0
        self.pumpOffTime = 0
        self.pump2OnTime = 0
        self.pump2OffTime = 0

    def encode(self):
        buf = BytesIO()
        buf.write(ClearComponent._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bhhhhhhhhhhhh", self.reply, self.fanRpm, self.gtRpm, self.gtOffTime, self.gtOnDegree, self.gtCycle, self.gtCleanDegree, self.rbrushRpm, self.mbrushRpm, self.pumpOnTime, self.pumpOffTime, self.pump2OnTime, self.pump2OffTime))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ClearComponent._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ClearComponent._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ClearComponent()
        self.reply, self.fanRpm, self.gtRpm, self.gtOffTime, self.gtOnDegree, self.gtCycle, self.gtCleanDegree, self.rbrushRpm, self.mbrushRpm, self.pumpOnTime, self.pumpOffTime, self.pump2OnTime, self.pump2OffTime = struct.unpack(">bhhhhhhhhhhhh", buf.read(25))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if ClearComponent in parents: return 0
        tmphash = (0xb2de185a8ba5e2fd) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ClearComponent._packed_fingerprint is None:
            ClearComponent._packed_fingerprint = struct.pack(">Q", ClearComponent._get_hash_recursive([]))
        return ClearComponent._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", ClearComponent._get_packed_fingerprint())[0]

