"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class AppSetRoomProperties(object):
    __slots__ = ["version", "count", "roomId", "fan", "waterLevel", "yMop", "cleanRepeat"]

    __typenames__ = ["int8_t", "int8_t", "int8_t", "int32_t", "int32_t", "int8_t", "int8_t"]

    __dimensions__ = [None, None, ["count"], ["count"], ["count"], ["count"], ["count"]]

    def __init__(self):
        self.version = 0
        self.count = 0
        self.roomId = []
        self.fan = []
        self.waterLevel = []
        self.yMop = []
        self.cleanRepeat = []

    def encode(self):
        buf = BytesIO()
        buf.write(AppSetRoomProperties._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bb", self.version, self.count))
        buf.write(struct.pack('>%db' % self.count, *self.roomId[:self.count]))
        buf.write(struct.pack('>%di' % self.count, *self.fan[:self.count]))
        buf.write(struct.pack('>%di' % self.count, *self.waterLevel[:self.count]))
        buf.write(struct.pack('>%db' % self.count, *self.yMop[:self.count]))
        buf.write(struct.pack('>%db' % self.count, *self.cleanRepeat[:self.count]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != AppSetRoomProperties._get_packed_fingerprint():
            raise ValueError("Decode error")
        return AppSetRoomProperties._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = AppSetRoomProperties()
        self.version, self.count = struct.unpack(">bb", buf.read(2))
        self.roomId = struct.unpack('>%db' % self.count, buf.read(self.count))
        self.fan = struct.unpack('>%di' % self.count, buf.read(self.count * 4))
        self.waterLevel = struct.unpack('>%di' % self.count, buf.read(self.count * 4))
        self.yMop = struct.unpack('>%db' % self.count, buf.read(self.count))
        self.cleanRepeat = struct.unpack('>%db' % self.count, buf.read(self.count))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if AppSetRoomProperties in parents: return 0
        tmphash = (0xf9cc86a4f613656) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if AppSetRoomProperties._packed_fingerprint is None:
            AppSetRoomProperties._packed_fingerprint = struct.pack(">Q", AppSetRoomProperties._get_hash_recursive([]))
        return AppSetRoomProperties._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", AppSetRoomProperties._get_packed_fingerprint())[0]

