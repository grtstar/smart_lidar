"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mars_message.Point

class AppPartitionDivision(object):
    __slots__ = ["version", "roomId", "begin", "end", "ret"]

    __typenames__ = ["int8_t", "int8_t", "mars_message.Point", "mars_message.Point", "int8_t"]

    __dimensions__ = [None, None, None, None, None]

    def __init__(self):
        self.version = 0
        self.roomId = 0
        self.begin = mars_message.Point()
        self.end = mars_message.Point()
        self.ret = 0

    def encode(self):
        buf = BytesIO()
        buf.write(AppPartitionDivision._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bb", self.version, self.roomId))
        assert self.begin._get_packed_fingerprint() == mars_message.Point._get_packed_fingerprint()
        self.begin._encode_one(buf)
        assert self.end._get_packed_fingerprint() == mars_message.Point._get_packed_fingerprint()
        self.end._encode_one(buf)
        buf.write(struct.pack(">b", self.ret))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != AppPartitionDivision._get_packed_fingerprint():
            raise ValueError("Decode error")
        return AppPartitionDivision._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = AppPartitionDivision()
        self.version, self.roomId = struct.unpack(">bb", buf.read(2))
        self.begin = mars_message.Point._decode_one(buf)
        self.end = mars_message.Point._decode_one(buf)
        self.ret = struct.unpack(">b", buf.read(1))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if AppPartitionDivision in parents: return 0
        newparents = parents + [AppPartitionDivision]
        tmphash = (0x3b95b5cfce0f2b25+ mars_message.Point._get_hash_recursive(newparents)+ mars_message.Point._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if AppPartitionDivision._packed_fingerprint is None:
            AppPartitionDivision._packed_fingerprint = struct.pack(">Q", AppPartitionDivision._get_hash_recursive([]))
        return AppPartitionDivision._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", AppPartitionDivision._get_packed_fingerprint())[0]

