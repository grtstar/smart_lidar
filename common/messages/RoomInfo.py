"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mars_message.GridMap

import mars_message.RoomPropety

import mars_message.DoorInfo

class RoomInfo(object):
    __slots__ = ["roomMap", "doorCount", "doors", "roomNum", "roomPropeties", "cleanOrder"]

    __typenames__ = ["mars_message.GridMap", "int32_t", "mars_message.DoorInfo", "int32_t", "mars_message.RoomPropety", "int32_t"]

    __dimensions__ = [None, None, ["doorCount"], None, ["roomNum"], ["roomNum"]]

    def __init__(self):
        self.roomMap = mars_message.GridMap()
        self.doorCount = 0
        self.doors = []
        self.roomNum = 0
        self.roomPropeties = []
        self.cleanOrder = []

    def encode(self):
        buf = BytesIO()
        buf.write(RoomInfo._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.roomMap._get_packed_fingerprint() == mars_message.GridMap._get_packed_fingerprint()
        self.roomMap._encode_one(buf)
        buf.write(struct.pack(">i", self.doorCount))
        for i0 in range(self.doorCount):
            assert self.doors[i0]._get_packed_fingerprint() == mars_message.DoorInfo._get_packed_fingerprint()
            self.doors[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.roomNum))
        for i0 in range(self.roomNum):
            assert self.roomPropeties[i0]._get_packed_fingerprint() == mars_message.RoomPropety._get_packed_fingerprint()
            self.roomPropeties[i0]._encode_one(buf)
        buf.write(struct.pack('>%di' % self.roomNum, *self.cleanOrder[:self.roomNum]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != RoomInfo._get_packed_fingerprint():
            raise ValueError("Decode error")
        return RoomInfo._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = RoomInfo()
        self.roomMap = mars_message.GridMap._decode_one(buf)
        self.doorCount = struct.unpack(">i", buf.read(4))[0]
        self.doors = []
        for i0 in range(self.doorCount):
            self.doors.append(mars_message.DoorInfo._decode_one(buf))
        self.roomNum = struct.unpack(">i", buf.read(4))[0]
        self.roomPropeties = []
        for i0 in range(self.roomNum):
            self.roomPropeties.append(mars_message.RoomPropety._decode_one(buf))
        self.cleanOrder = struct.unpack('>%di' % self.roomNum, buf.read(self.roomNum * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if RoomInfo in parents: return 0
        newparents = parents + [RoomInfo]
        tmphash = (0xfd92cd7f16a5d8a1+ mars_message.GridMap._get_hash_recursive(newparents)+ mars_message.DoorInfo._get_hash_recursive(newparents)+ mars_message.RoomPropety._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if RoomInfo._packed_fingerprint is None:
            RoomInfo._packed_fingerprint = struct.pack(">Q", RoomInfo._get_hash_recursive([]))
        return RoomInfo._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", RoomInfo._get_packed_fingerprint())[0]

