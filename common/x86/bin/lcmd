#!/usr/bin/python

import signal
import lcm
import sys

import mars_message
import json

def usage():
    print(
        "\n"
        "usage: lcmd [OPTIONS]\n"
        "\n"
        "lcm messages publish and subscibe debug.\n"
        "\n"
        "  -h     prints this help text and exits\n"
        "  -p [topic] [type] [msg]   publish msg on topic\n"
        "  -m [topic] [type] subscibe msg on topic\n"
    )

msg_info = {}

def print_msg(msg):
    print(json.dumps(msg.to_dict(), indent=4))

def lcm_message_handler(channel, data):
    msg = eval(msg_info[channel] + '.decode(data)')
    print_msg(msg)

def lcm_publish(lc, channel, type, data):
    msg = eval(type + '()')
    msg.from_dict(json.loads(data))
    lc.publish(channel, msg.encode())

def produce_auto_complete_sh():
    pass

def quit(signum, frame):
    print('You choose to stop me.')
    sys.exit(0)

def main():
    signal.signal(signal.SIGINT, quit)
    lc = lcm.LCM()
    sub = False
    if(len(sys.argv) == 4):
        if(sys.argv[1] == "-m"):
            msg_info[sys.argv[2]] = sys.argv[3]
            lc.subscribe(sys.argv[2], lcm_message_handler)
            sub = True    
    elif(len(sys.argv) == 5):
        if(sys.argv[1] == '-p'):
            lcm_publish(lc, sys.argv[2], sys.argv[3], sys.argv[4])
            return
    while sub == True:
        lc.handle()
    else:
        usage()

if __name__ == "__main__":
    main()