"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

import baofei_message.RegionCleans

class RegionCleansSet(object):
    __slots__ = ["mapSign", "clean"]

    __typenames__ = ["int32_t", "baofei_message.RegionCleans"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.mapSign = 0
        self.clean = baofei_message.RegionCleans()

    def encode(self):
        buf = BytesIO()
        buf.write(RegionCleansSet._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.mapSign))
        assert self.clean._get_packed_fingerprint() == baofei_message.RegionCleans._get_packed_fingerprint()
        self.clean._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != RegionCleansSet._get_packed_fingerprint():
            raise ValueError("Decode error")
        return RegionCleansSet._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = RegionCleansSet()
        self.mapSign = struct.unpack(">i", buf.read(4))[0]
        self.clean = baofei_message.RegionCleans._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if RegionCleansSet in parents: return 0
        newparents = parents + [RegionCleansSet]
        tmphash = (0x2c8dc616a9b5dc60+ baofei_message.RegionCleans._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if RegionCleansSet._packed_fingerprint is None:
            RegionCleansSet._packed_fingerprint = struct.pack(">Q", RegionCleansSet._get_hash_recursive([]))
        return RegionCleansSet._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", RegionCleansSet._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.mapSign = j["mapSign"]
        self.clean.from_dict(j["clean"])

    def to_dict(self):
        j = {}
        j["mapSign"] = self.mapSign
        j["clean"] = self.clean.to_dict()
        return j

