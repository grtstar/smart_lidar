"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

class RegionRelation(object):
    __slots__ = ["id1", "id2"]

    __typenames__ = ["int8_t", "int8_t"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.id1 = 0
        self.id2 = 0

    def encode(self):
        buf = BytesIO()
        buf.write(RegionRelation._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bb", self.id1, self.id2))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != RegionRelation._get_packed_fingerprint():
            raise ValueError("Decode error")
        return RegionRelation._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = RegionRelation()
        self.id1, self.id2 = struct.unpack(">bb", buf.read(2))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if RegionRelation in parents: return 0
        tmphash = (0x7b3218c71944e7f5) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if RegionRelation._packed_fingerprint is None:
            RegionRelation._packed_fingerprint = struct.pack(">Q", RegionRelation._get_hash_recursive([]))
        return RegionRelation._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", RegionRelation._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.id1 = j["id1"]
        self.id2 = j["id2"]

    def to_dict(self):
        j = {}
        j["id1"] = self.id1
        j["id2"] = self.id2
        return j

