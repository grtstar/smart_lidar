"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

class Order(object):
    __slots__ = ["orderId", "sign", "valid", "hour", "minute", "mode", "fan", "waterTank", "regionCount", "regions", "mopMode", "washWorkType", "wipeMode", "conflictType"]

    __typenames__ = ["int8_t", "int32_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, ["regionCount"], None, None, None, None]

    def __init__(self):
        self.orderId = 0
        self.sign = 0
        self.valid = 0
        self.hour = 0
        self.minute = 0
        self.mode = 0
        self.fan = 0
        self.waterTank = 0
        self.regionCount = 0
        self.regions = []
        self.mopMode = 0
        self.washWorkType = 0
        self.wipeMode = 0
        self.conflictType = 0

    def encode(self):
        buf = BytesIO()
        buf.write(Order._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bibbbbbbb", self.orderId, self.sign, self.valid, self.hour, self.minute, self.mode, self.fan, self.waterTank, self.regionCount))
        buf.write(struct.pack('>%db' % self.regionCount, *self.regions[:self.regionCount]))
        buf.write(struct.pack(">bbbb", self.mopMode, self.washWorkType, self.wipeMode, self.conflictType))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Order._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Order._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Order()
        self.orderId, self.sign, self.valid, self.hour, self.minute, self.mode, self.fan, self.waterTank, self.regionCount = struct.unpack(">bibbbbbbb", buf.read(12))
        self.regions = struct.unpack('>%db' % self.regionCount, buf.read(self.regionCount))
        self.mopMode, self.washWorkType, self.wipeMode, self.conflictType = struct.unpack(">bbbb", buf.read(4))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if Order in parents: return 0
        tmphash = (0xe917a071e6296828) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Order._packed_fingerprint is None:
            Order._packed_fingerprint = struct.pack(">Q", Order._get_hash_recursive([]))
        return Order._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Order._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.orderId = j["orderId"]
        self.sign = j["sign"]
        self.valid = j["valid"]
        self.hour = j["hour"]
        self.minute = j["minute"]
        self.mode = j["mode"]
        self.fan = j["fan"]
        self.waterTank = j["waterTank"]
        self.regionCount = j["regionCount"]
        self.regions = j["regions"]
        self.mopMode = j["mopMode"]
        self.washWorkType = j["washWorkType"]
        self.wipeMode = j["wipeMode"]
        self.conflictType = j["conflictType"]

    def to_dict(self):
        j = {}
        j["orderId"] = self.orderId
        j["sign"] = self.sign
        j["valid"] = self.valid
        j["hour"] = self.hour
        j["minute"] = self.minute
        j["mode"] = self.mode
        j["fan"] = self.fan
        j["waterTank"] = self.waterTank
        j["regionCount"] = self.regionCount
        j["regions"] = self.regions
        j["mopMode"] = self.mopMode
        j["washWorkType"] = self.washWorkType
        j["wipeMode"] = self.wipeMode
        j["conflictType"] = self.conflictType
        return j

