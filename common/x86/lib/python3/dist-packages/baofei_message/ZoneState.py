"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

import baofei_message.Rect2d

class ZoneState(object):
    __slots__ = ["clean", "state"]

    __typenames__ = ["baofei_message.Rect2d", "int8_t"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.clean = baofei_message.Rect2d()
        self.state = 0

    def encode(self):
        buf = BytesIO()
        buf.write(ZoneState._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.clean._get_packed_fingerprint() == baofei_message.Rect2d._get_packed_fingerprint()
        self.clean._encode_one(buf)
        buf.write(struct.pack(">b", self.state))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZoneState._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZoneState._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZoneState()
        self.clean = baofei_message.Rect2d._decode_one(buf)
        self.state = struct.unpack(">b", buf.read(1))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if ZoneState in parents: return 0
        newparents = parents + [ZoneState]
        tmphash = (0x590f8388512c0c1f+ baofei_message.Rect2d._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZoneState._packed_fingerprint is None:
            ZoneState._packed_fingerprint = struct.pack(">Q", ZoneState._get_hash_recursive([]))
        return ZoneState._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", ZoneState._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.clean.from_dict(j["clean"])
        self.state = j["state"]

    def to_dict(self):
        j = {}
        j["clean"] = self.clean.to_dict()
        j["state"] = self.state
        return j

