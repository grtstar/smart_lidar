"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

class Signs(object):
    __slots__ = ["num", "sign"]

    __typenames__ = ["int32_t", "int32_t"]

    __dimensions__ = [None, ["num"]]

    def __init__(self):
        self.num = 0
        self.sign = []

    def encode(self):
        buf = BytesIO()
        buf.write(Signs._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.num))
        buf.write(struct.pack('>%di' % self.num, *self.sign[:self.num]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Signs._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Signs._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Signs()
        self.num = struct.unpack(">i", buf.read(4))[0]
        self.sign = struct.unpack('>%di' % self.num, buf.read(self.num * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if Signs in parents: return 0
        tmphash = (0x175ac80bc248d143) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Signs._packed_fingerprint is None:
            Signs._packed_fingerprint = struct.pack(">Q", Signs._get_hash_recursive([]))
        return Signs._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Signs._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.num = j["num"]
        self.sign = j["sign"]

    def to_dict(self):
        j = {}
        j["num"] = self.num
        j["sign"] = self.sign
        return j

