"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

import baofei_message.RectArea

import baofei_message.Object

import baofei_message.Forbbiden

import baofei_message.Region

import baofei_message.RegionRelation

import baofei_message.Grid2d

import baofei_message.RectAreas

class Map(object):
    __slots__ = ["version", "mapType", "mapSign", "width", "height", "mapCount", "map", "pathCount", "path", "pathAttr", "chargePos", "robotPos", "robotAngle", "center", "leftMax", "rightMax", "cleanArea", "cleanTime", "cleanModule", "cleanSign", "cleanAreas", "pointArea", "pointPoint", "forbbiden", "regionNum", "region", "relationPhycialNum", "phycialRelation", "relationLogicNum", "logicRelation", "objectCount", "aiVison", "isFormalMap", "isSaveToFlash", "objectMapCount", "objectMap"]

    __typenames__ = ["int8_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int8_t", "int32_t", "baofei_message.Grid2d", "int8_t", "baofei_message.Grid2d", "baofei_message.Grid2d", "float", "baofei_message.Grid2d", "baofei_message.Grid2d", "baofei_message.Grid2d", "int32_t", "int32_t", "int32_t", "int32_t", "baofei_message.RectAreas", "baofei_message.RectArea", "baofei_message.RectArea", "baofei_message.Forbbiden", "int8_t", "baofei_message.Region", "int8_t", "baofei_message.RegionRelation", "int8_t", "baofei_message.RegionRelation", "int32_t", "baofei_message.Object", "int8_t", "int8_t", "int32_t", "int8_t"]

    __dimensions__ = [None, None, None, None, None, None, ["mapCount"], None, ["pathCount"], ["pathCount"], None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, ["regionNum"], None, ["relationPhycialNum"], None, ["relationLogicNum"], None, ["objectCount"], None, None, None, ["objectMapCount"]]

    def __init__(self):
        self.version = 0
        self.mapType = 0
        self.mapSign = 0
        self.width = 0
        self.height = 0
        self.mapCount = 0
        self.map = []
        self.pathCount = 0
        self.path = []
        self.pathAttr = []
        self.chargePos = baofei_message.Grid2d()
        self.robotPos = baofei_message.Grid2d()
        self.robotAngle = 0.0
        self.center = baofei_message.Grid2d()
        self.leftMax = baofei_message.Grid2d()
        self.rightMax = baofei_message.Grid2d()
        self.cleanArea = 0
        self.cleanTime = 0
        self.cleanModule = 0
        self.cleanSign = 0
        self.cleanAreas = baofei_message.RectAreas()
        self.pointArea = baofei_message.RectArea()
        self.pointPoint = baofei_message.RectArea()
        self.forbbiden = baofei_message.Forbbiden()
        self.regionNum = 0
        self.region = []
        self.relationPhycialNum = 0
        self.phycialRelation = []
        self.relationLogicNum = 0
        self.logicRelation = []
        self.objectCount = 0
        self.aiVison = []
        self.isFormalMap = 0
        self.isSaveToFlash = 0
        self.objectMapCount = 0
        self.objectMap = []

    def encode(self):
        buf = BytesIO()
        buf.write(Map._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">biiiii", self.version, self.mapType, self.mapSign, self.width, self.height, self.mapCount))
        buf.write(struct.pack('>%db' % self.mapCount, *self.map[:self.mapCount]))
        buf.write(struct.pack(">i", self.pathCount))
        for i0 in range(self.pathCount):
            assert self.path[i0]._get_packed_fingerprint() == baofei_message.Grid2d._get_packed_fingerprint()
            self.path[i0]._encode_one(buf)
        buf.write(struct.pack('>%db' % self.pathCount, *self.pathAttr[:self.pathCount]))
        assert self.chargePos._get_packed_fingerprint() == baofei_message.Grid2d._get_packed_fingerprint()
        self.chargePos._encode_one(buf)
        assert self.robotPos._get_packed_fingerprint() == baofei_message.Grid2d._get_packed_fingerprint()
        self.robotPos._encode_one(buf)
        buf.write(struct.pack(">f", self.robotAngle))
        assert self.center._get_packed_fingerprint() == baofei_message.Grid2d._get_packed_fingerprint()
        self.center._encode_one(buf)
        assert self.leftMax._get_packed_fingerprint() == baofei_message.Grid2d._get_packed_fingerprint()
        self.leftMax._encode_one(buf)
        assert self.rightMax._get_packed_fingerprint() == baofei_message.Grid2d._get_packed_fingerprint()
        self.rightMax._encode_one(buf)
        buf.write(struct.pack(">iiii", self.cleanArea, self.cleanTime, self.cleanModule, self.cleanSign))
        assert self.cleanAreas._get_packed_fingerprint() == baofei_message.RectAreas._get_packed_fingerprint()
        self.cleanAreas._encode_one(buf)
        assert self.pointArea._get_packed_fingerprint() == baofei_message.RectArea._get_packed_fingerprint()
        self.pointArea._encode_one(buf)
        assert self.pointPoint._get_packed_fingerprint() == baofei_message.RectArea._get_packed_fingerprint()
        self.pointPoint._encode_one(buf)
        assert self.forbbiden._get_packed_fingerprint() == baofei_message.Forbbiden._get_packed_fingerprint()
        self.forbbiden._encode_one(buf)
        buf.write(struct.pack(">b", self.regionNum))
        for i0 in range(self.regionNum):
            assert self.region[i0]._get_packed_fingerprint() == baofei_message.Region._get_packed_fingerprint()
            self.region[i0]._encode_one(buf)
        buf.write(struct.pack(">b", self.relationPhycialNum))
        for i0 in range(self.relationPhycialNum):
            assert self.phycialRelation[i0]._get_packed_fingerprint() == baofei_message.RegionRelation._get_packed_fingerprint()
            self.phycialRelation[i0]._encode_one(buf)
        buf.write(struct.pack(">b", self.relationLogicNum))
        for i0 in range(self.relationLogicNum):
            assert self.logicRelation[i0]._get_packed_fingerprint() == baofei_message.RegionRelation._get_packed_fingerprint()
            self.logicRelation[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.objectCount))
        for i0 in range(self.objectCount):
            assert self.aiVison[i0]._get_packed_fingerprint() == baofei_message.Object._get_packed_fingerprint()
            self.aiVison[i0]._encode_one(buf)
        buf.write(struct.pack(">bbi", self.isFormalMap, self.isSaveToFlash, self.objectMapCount))
        buf.write(struct.pack('>%db' % self.objectMapCount, *self.objectMap[:self.objectMapCount]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Map._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Map._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Map()
        self.version, self.mapType, self.mapSign, self.width, self.height, self.mapCount = struct.unpack(">biiiii", buf.read(21))
        self.map = struct.unpack('>%db' % self.mapCount, buf.read(self.mapCount))
        self.pathCount = struct.unpack(">i", buf.read(4))[0]
        self.path = []
        for i0 in range(self.pathCount):
            self.path.append(baofei_message.Grid2d._decode_one(buf))
        self.pathAttr = struct.unpack('>%db' % self.pathCount, buf.read(self.pathCount))
        self.chargePos = baofei_message.Grid2d._decode_one(buf)
        self.robotPos = baofei_message.Grid2d._decode_one(buf)
        self.robotAngle = struct.unpack(">f", buf.read(4))[0]
        self.center = baofei_message.Grid2d._decode_one(buf)
        self.leftMax = baofei_message.Grid2d._decode_one(buf)
        self.rightMax = baofei_message.Grid2d._decode_one(buf)
        self.cleanArea, self.cleanTime, self.cleanModule, self.cleanSign = struct.unpack(">iiii", buf.read(16))
        self.cleanAreas = baofei_message.RectAreas._decode_one(buf)
        self.pointArea = baofei_message.RectArea._decode_one(buf)
        self.pointPoint = baofei_message.RectArea._decode_one(buf)
        self.forbbiden = baofei_message.Forbbiden._decode_one(buf)
        self.regionNum = struct.unpack(">b", buf.read(1))[0]
        self.region = []
        for i0 in range(self.regionNum):
            self.region.append(baofei_message.Region._decode_one(buf))
        self.relationPhycialNum = struct.unpack(">b", buf.read(1))[0]
        self.phycialRelation = []
        for i0 in range(self.relationPhycialNum):
            self.phycialRelation.append(baofei_message.RegionRelation._decode_one(buf))
        self.relationLogicNum = struct.unpack(">b", buf.read(1))[0]
        self.logicRelation = []
        for i0 in range(self.relationLogicNum):
            self.logicRelation.append(baofei_message.RegionRelation._decode_one(buf))
        self.objectCount = struct.unpack(">i", buf.read(4))[0]
        self.aiVison = []
        for i0 in range(self.objectCount):
            self.aiVison.append(baofei_message.Object._decode_one(buf))
        self.isFormalMap, self.isSaveToFlash, self.objectMapCount = struct.unpack(">bbi", buf.read(6))
        self.objectMap = struct.unpack('>%db' % self.objectMapCount, buf.read(self.objectMapCount))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if Map in parents: return 0
        newparents = parents + [Map]
        tmphash = (0xd35b622beebed2e8+ baofei_message.Grid2d._get_hash_recursive(newparents)+ baofei_message.Grid2d._get_hash_recursive(newparents)+ baofei_message.Grid2d._get_hash_recursive(newparents)+ baofei_message.Grid2d._get_hash_recursive(newparents)+ baofei_message.Grid2d._get_hash_recursive(newparents)+ baofei_message.Grid2d._get_hash_recursive(newparents)+ baofei_message.RectAreas._get_hash_recursive(newparents)+ baofei_message.RectArea._get_hash_recursive(newparents)+ baofei_message.RectArea._get_hash_recursive(newparents)+ baofei_message.Forbbiden._get_hash_recursive(newparents)+ baofei_message.Region._get_hash_recursive(newparents)+ baofei_message.RegionRelation._get_hash_recursive(newparents)+ baofei_message.RegionRelation._get_hash_recursive(newparents)+ baofei_message.Object._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Map._packed_fingerprint is None:
            Map._packed_fingerprint = struct.pack(">Q", Map._get_hash_recursive([]))
        return Map._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Map._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.version = j["version"]
        self.mapType = j["mapType"]
        self.mapSign = j["mapSign"]
        self.width = j["width"]
        self.height = j["height"]
        self.mapCount = j["mapCount"]
        self.map = j["map"]
        self.pathCount = j["pathCount"]
        self.path = [x.from_dict() for x in j["path"]]
        self.pathAttr = j["pathAttr"]
        self.chargePos.from_dict(j["chargePos"])
        self.robotPos.from_dict(j["robotPos"])
        self.robotAngle = j["robotAngle"]
        self.center.from_dict(j["center"])
        self.leftMax.from_dict(j["leftMax"])
        self.rightMax.from_dict(j["rightMax"])
        self.cleanArea = j["cleanArea"]
        self.cleanTime = j["cleanTime"]
        self.cleanModule = j["cleanModule"]
        self.cleanSign = j["cleanSign"]
        self.cleanAreas.from_dict(j["cleanAreas"])
        self.pointArea.from_dict(j["pointArea"])
        self.pointPoint.from_dict(j["pointPoint"])
        self.forbbiden.from_dict(j["forbbiden"])
        self.regionNum = j["regionNum"]
        self.region = [x.from_dict() for x in j["region"]]
        self.relationPhycialNum = j["relationPhycialNum"]
        self.phycialRelation = [x.from_dict() for x in j["phycialRelation"]]
        self.relationLogicNum = j["relationLogicNum"]
        self.logicRelation = [x.from_dict() for x in j["logicRelation"]]
        self.objectCount = j["objectCount"]
        self.aiVison = [x.from_dict() for x in j["aiVison"]]
        self.isFormalMap = j["isFormalMap"]
        self.isSaveToFlash = j["isSaveToFlash"]
        self.objectMapCount = j["objectMapCount"]
        self.objectMap = j["objectMap"]

    def to_dict(self):
        j = {}
        j["version"] = self.version
        j["mapType"] = self.mapType
        j["mapSign"] = self.mapSign
        j["width"] = self.width
        j["height"] = self.height
        j["mapCount"] = self.mapCount
        j["map"] = self.map
        j["pathCount"] = self.pathCount
        j["path"] = [x.to_dict() for x in self.path]
        j["pathAttr"] = self.pathAttr
        j["chargePos"] = self.chargePos.to_dict()
        j["robotPos"] = self.robotPos.to_dict()
        j["robotAngle"] = self.robotAngle
        j["center"] = self.center.to_dict()
        j["leftMax"] = self.leftMax.to_dict()
        j["rightMax"] = self.rightMax.to_dict()
        j["cleanArea"] = self.cleanArea
        j["cleanTime"] = self.cleanTime
        j["cleanModule"] = self.cleanModule
        j["cleanSign"] = self.cleanSign
        j["cleanAreas"] = self.cleanAreas.to_dict()
        j["pointArea"] = self.pointArea.to_dict()
        j["pointPoint"] = self.pointPoint.to_dict()
        j["forbbiden"] = self.forbbiden.to_dict()
        j["regionNum"] = self.regionNum
        j["region"] = [x.to_dict() for x in self.region]
        j["relationPhycialNum"] = self.relationPhycialNum
        j["phycialRelation"] = [x.to_dict() for x in self.phycialRelation]
        j["relationLogicNum"] = self.relationLogicNum
        j["logicRelation"] = [x.to_dict() for x in self.logicRelation]
        j["objectCount"] = self.objectCount
        j["aiVison"] = [x.to_dict() for x in self.aiVison]
        j["isFormalMap"] = self.isFormalMap
        j["isSaveToFlash"] = self.isSaveToFlash
        j["objectMapCount"] = self.objectMapCount
        j["objectMap"] = self.objectMap
        return j

