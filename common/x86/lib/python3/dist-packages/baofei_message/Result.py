"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

class Result(object):
    __slots__ = ["code", "a", "b", "c"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "int32_t"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.code = 0
        self.a = 0
        self.b = 0
        self.c = 0

    def encode(self):
        buf = BytesIO()
        buf.write(Result._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiii", self.code, self.a, self.b, self.c))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Result._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Result._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Result()
        self.code, self.a, self.b, self.c = struct.unpack(">iiii", buf.read(16))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if Result in parents: return 0
        tmphash = (0xc1d0b8bbefdf765f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Result._packed_fingerprint is None:
            Result._packed_fingerprint = struct.pack(">Q", Result._get_hash_recursive([]))
        return Result._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Result._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.code = j["code"]
        self.a = j["a"]
        self.b = j["b"]
        self.c = j["c"]

    def to_dict(self):
        j = {}
        j["code"] = self.code
        j["a"] = self.a
        j["b"] = self.b
        j["c"] = self.c
        return j

