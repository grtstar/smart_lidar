"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

import baofei_message.Line2d

class RegionSplit(object):
    __slots__ = ["regionNum", "line"]

    __typenames__ = ["int8_t", "baofei_message.Line2d"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.regionNum = 0
        self.line = baofei_message.Line2d()

    def encode(self):
        buf = BytesIO()
        buf.write(RegionSplit._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.regionNum))
        assert self.line._get_packed_fingerprint() == baofei_message.Line2d._get_packed_fingerprint()
        self.line._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != RegionSplit._get_packed_fingerprint():
            raise ValueError("Decode error")
        return RegionSplit._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = RegionSplit()
        self.regionNum = struct.unpack(">b", buf.read(1))[0]
        self.line = baofei_message.Line2d._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if RegionSplit in parents: return 0
        newparents = parents + [RegionSplit]
        tmphash = (0x84a3a603aa1797b8+ baofei_message.Line2d._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if RegionSplit._packed_fingerprint is None:
            RegionSplit._packed_fingerprint = struct.pack(">Q", RegionSplit._get_hash_recursive([]))
        return RegionSplit._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", RegionSplit._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.regionNum = j["regionNum"]
        self.line.from_dict(j["line"])

    def to_dict(self):
        j = {}
        j["regionNum"] = self.regionNum
        j["line"] = self.line.to_dict()
        return j

