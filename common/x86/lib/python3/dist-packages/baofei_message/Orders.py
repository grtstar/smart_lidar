"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

import baofei_message.Order

class Orders(object):
    __slots__ = ["robotYear", "robotMonth", "robotDay", "robotHour", "robotMinute", "robotSecond", "timezone", "num", "orders"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "baofei_message.Order"]

    __dimensions__ = [None, None, None, None, None, None, None, None, ["num"]]

    def __init__(self):
        self.robotYear = 0
        self.robotMonth = 0
        self.robotDay = 0
        self.robotHour = 0
        self.robotMinute = 0
        self.robotSecond = 0
        self.timezone = 0
        self.num = 0
        self.orders = []

    def encode(self):
        buf = BytesIO()
        buf.write(Orders._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiiiiiii", self.robotYear, self.robotMonth, self.robotDay, self.robotHour, self.robotMinute, self.robotSecond, self.timezone, self.num))
        for i0 in range(self.num):
            assert self.orders[i0]._get_packed_fingerprint() == baofei_message.Order._get_packed_fingerprint()
            self.orders[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Orders._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Orders._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Orders()
        self.robotYear, self.robotMonth, self.robotDay, self.robotHour, self.robotMinute, self.robotSecond, self.timezone, self.num = struct.unpack(">iiiiiiii", buf.read(32))
        self.orders = []
        for i0 in range(self.num):
            self.orders.append(baofei_message.Order._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if Orders in parents: return 0
        newparents = parents + [Orders]
        tmphash = (0xd51dc45cc56b82a3+ baofei_message.Order._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Orders._packed_fingerprint is None:
            Orders._packed_fingerprint = struct.pack(">Q", Orders._get_hash_recursive([]))
        return Orders._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Orders._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.robotYear = j["robotYear"]
        self.robotMonth = j["robotMonth"]
        self.robotDay = j["robotDay"]
        self.robotHour = j["robotHour"]
        self.robotMinute = j["robotMinute"]
        self.robotSecond = j["robotSecond"]
        self.timezone = j["timezone"]
        self.num = j["num"]
        self.orders = [x.from_dict() for x in j["orders"]]

    def to_dict(self):
        j = {}
        j["robotYear"] = self.robotYear
        j["robotMonth"] = self.robotMonth
        j["robotDay"] = self.robotDay
        j["robotHour"] = self.robotHour
        j["robotMinute"] = self.robotMinute
        j["robotSecond"] = self.robotSecond
        j["timezone"] = self.timezone
        j["num"] = self.num
        j["orders"] = [x.to_dict() for x in self.orders]
        return j

