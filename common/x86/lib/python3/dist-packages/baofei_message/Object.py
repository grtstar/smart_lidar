"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

import baofei_message.Grid2d

class Object(object):
    __slots__ = ["id", "pos", "type", "rate"]

    __typenames__ = ["int32_t", "baofei_message.Grid2d", "string", "int8_t"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.id = 0
        self.pos = baofei_message.Grid2d()
        self.type = ""
        self.rate = 0

    def encode(self):
        buf = BytesIO()
        buf.write(Object._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.id))
        assert self.pos._get_packed_fingerprint() == baofei_message.Grid2d._get_packed_fingerprint()
        self.pos._encode_one(buf)
        __type_encoded = self.type.encode('utf-8')
        buf.write(struct.pack('>I', len(__type_encoded)+1))
        buf.write(__type_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">b", self.rate))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Object._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Object._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Object()
        self.id = struct.unpack(">i", buf.read(4))[0]
        self.pos = baofei_message.Grid2d._decode_one(buf)
        __type_len = struct.unpack('>I', buf.read(4))[0]
        self.type = buf.read(__type_len)[:-1].decode('utf-8', 'replace')
        self.rate = struct.unpack(">b", buf.read(1))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if Object in parents: return 0
        newparents = parents + [Object]
        tmphash = (0x7cfef9e87980afbd+ baofei_message.Grid2d._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Object._packed_fingerprint is None:
            Object._packed_fingerprint = struct.pack(">Q", Object._get_hash_recursive([]))
        return Object._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Object._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.id = j["id"]
        self.pos.from_dict(j["pos"])
        self.type = j["type"]
        self.rate = j["rate"]

    def to_dict(self):
        j = {}
        j["id"] = self.id
        j["pos"] = self.pos.to_dict()
        j["type"] = self.type
        j["rate"] = self.rate
        return j

