"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

import baofei_message.Rect2d

import baofei_message.Line2d

class Forbbiden(object):
    __slots__ = ["lineCount", "wall", "areaCount", "area", "areaSign", "mopCount", "mop", "mopSign"]

    __typenames__ = ["int8_t", "baofei_message.Line2d", "int8_t", "baofei_message.Rect2d", "int32_t", "int8_t", "baofei_message.Rect2d", "int32_t"]

    __dimensions__ = [None, ["lineCount"], None, ["areaCount"], ["areaCount"], None, ["mopCount"], ["mopCount"]]

    def __init__(self):
        self.lineCount = 0
        self.wall = []
        self.areaCount = 0
        self.area = []
        self.areaSign = []
        self.mopCount = 0
        self.mop = []
        self.mopSign = []

    def encode(self):
        buf = BytesIO()
        buf.write(Forbbiden._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.lineCount))
        for i0 in range(self.lineCount):
            assert self.wall[i0]._get_packed_fingerprint() == baofei_message.Line2d._get_packed_fingerprint()
            self.wall[i0]._encode_one(buf)
        buf.write(struct.pack(">b", self.areaCount))
        for i0 in range(self.areaCount):
            assert self.area[i0]._get_packed_fingerprint() == baofei_message.Rect2d._get_packed_fingerprint()
            self.area[i0]._encode_one(buf)
        buf.write(struct.pack('>%di' % self.areaCount, *self.areaSign[:self.areaCount]))
        buf.write(struct.pack(">b", self.mopCount))
        for i0 in range(self.mopCount):
            assert self.mop[i0]._get_packed_fingerprint() == baofei_message.Rect2d._get_packed_fingerprint()
            self.mop[i0]._encode_one(buf)
        buf.write(struct.pack('>%di' % self.mopCount, *self.mopSign[:self.mopCount]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Forbbiden._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Forbbiden._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Forbbiden()
        self.lineCount = struct.unpack(">b", buf.read(1))[0]
        self.wall = []
        for i0 in range(self.lineCount):
            self.wall.append(baofei_message.Line2d._decode_one(buf))
        self.areaCount = struct.unpack(">b", buf.read(1))[0]
        self.area = []
        for i0 in range(self.areaCount):
            self.area.append(baofei_message.Rect2d._decode_one(buf))
        self.areaSign = struct.unpack('>%di' % self.areaCount, buf.read(self.areaCount * 4))
        self.mopCount = struct.unpack(">b", buf.read(1))[0]
        self.mop = []
        for i0 in range(self.mopCount):
            self.mop.append(baofei_message.Rect2d._decode_one(buf))
        self.mopSign = struct.unpack('>%di' % self.mopCount, buf.read(self.mopCount * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if Forbbiden in parents: return 0
        newparents = parents + [Forbbiden]
        tmphash = (0xf6b339b198f60059+ baofei_message.Line2d._get_hash_recursive(newparents)+ baofei_message.Rect2d._get_hash_recursive(newparents)+ baofei_message.Rect2d._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Forbbiden._packed_fingerprint is None:
            Forbbiden._packed_fingerprint = struct.pack(">Q", Forbbiden._get_hash_recursive([]))
        return Forbbiden._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Forbbiden._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.lineCount = j["lineCount"]
        self.wall = [x.from_dict() for x in j["wall"]]
        self.areaCount = j["areaCount"]
        self.area = [x.from_dict() for x in j["area"]]
        self.areaSign = j["areaSign"]
        self.mopCount = j["mopCount"]
        self.mop = [x.from_dict() for x in j["mop"]]
        self.mopSign = j["mopSign"]

    def to_dict(self):
        j = {}
        j["lineCount"] = self.lineCount
        j["wall"] = [x.to_dict() for x in self.wall]
        j["areaCount"] = self.areaCount
        j["area"] = [x.to_dict() for x in self.area]
        j["areaSign"] = self.areaSign
        j["mopCount"] = self.mopCount
        j["mop"] = [x.to_dict() for x in self.mop]
        j["mopSign"] = self.mopSign
        return j

