"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

import baofei_message.RectArea

class RobotArea(object):
    __slots__ = ["cleanCount", "clean", "forbiddenCount", "forbidden"]

    __typenames__ = ["int8_t", "baofei_message.RectArea", "int8_t", "baofei_message.RectArea"]

    __dimensions__ = [None, ["cleanCount"], None, ["forbiddenCount"]]

    def __init__(self):
        self.cleanCount = 0
        self.clean = []
        self.forbiddenCount = 0
        self.forbidden = []

    def encode(self):
        buf = BytesIO()
        buf.write(RobotArea._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.cleanCount))
        for i0 in range(self.cleanCount):
            assert self.clean[i0]._get_packed_fingerprint() == baofei_message.RectArea._get_packed_fingerprint()
            self.clean[i0]._encode_one(buf)
        buf.write(struct.pack(">b", self.forbiddenCount))
        for i0 in range(self.forbiddenCount):
            assert self.forbidden[i0]._get_packed_fingerprint() == baofei_message.RectArea._get_packed_fingerprint()
            self.forbidden[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != RobotArea._get_packed_fingerprint():
            raise ValueError("Decode error")
        return RobotArea._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = RobotArea()
        self.cleanCount = struct.unpack(">b", buf.read(1))[0]
        self.clean = []
        for i0 in range(self.cleanCount):
            self.clean.append(baofei_message.RectArea._decode_one(buf))
        self.forbiddenCount = struct.unpack(">b", buf.read(1))[0]
        self.forbidden = []
        for i0 in range(self.forbiddenCount):
            self.forbidden.append(baofei_message.RectArea._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if RobotArea in parents: return 0
        newparents = parents + [RobotArea]
        tmphash = (0x7254da9ceb8e013d+ baofei_message.RectArea._get_hash_recursive(newparents)+ baofei_message.RectArea._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if RobotArea._packed_fingerprint is None:
            RobotArea._packed_fingerprint = struct.pack(">Q", RobotArea._get_hash_recursive([]))
        return RobotArea._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", RobotArea._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.cleanCount = j["cleanCount"]
        self.clean = [x.from_dict() for x in j["clean"]]
        self.forbiddenCount = j["forbiddenCount"]
        self.forbidden = [x.from_dict() for x in j["forbidden"]]

    def to_dict(self):
        j = {}
        j["cleanCount"] = self.cleanCount
        j["clean"] = [x.to_dict() for x in self.clean]
        j["forbiddenCount"] = self.forbiddenCount
        j["forbidden"] = [x.to_dict() for x in self.forbidden]
        return j

