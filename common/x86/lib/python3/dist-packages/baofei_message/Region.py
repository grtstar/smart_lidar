"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

import baofei_message.Rect2d

class Region(object):
    __slots__ = ["name", "regionNum", "cleanNum", "area"]

    __typenames__ = ["string", "int8_t", "int8_t", "baofei_message.Rect2d"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.name = ""
        self.regionNum = 0
        self.cleanNum = 0
        self.area = baofei_message.Rect2d()

    def encode(self):
        buf = BytesIO()
        buf.write(Region._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">bb", self.regionNum, self.cleanNum))
        assert self.area._get_packed_fingerprint() == baofei_message.Rect2d._get_packed_fingerprint()
        self.area._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Region._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Region._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Region()
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        self.regionNum, self.cleanNum = struct.unpack(">bb", buf.read(2))
        self.area = baofei_message.Rect2d._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if Region in parents: return 0
        newparents = parents + [Region]
        tmphash = (0x23955c917fa0f828+ baofei_message.Rect2d._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Region._packed_fingerprint is None:
            Region._packed_fingerprint = struct.pack(">Q", Region._get_hash_recursive([]))
        return Region._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Region._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.name = j["name"]
        self.regionNum = j["regionNum"]
        self.cleanNum = j["cleanNum"]
        self.area.from_dict(j["area"])

    def to_dict(self):
        j = {}
        j["name"] = self.name
        j["regionNum"] = self.regionNum
        j["cleanNum"] = self.cleanNum
        j["area"] = self.area.to_dict()
        return j

