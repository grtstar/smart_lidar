"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class PartsLifeConfig(object):
    __slots__ = ["sideBrushLife", "sideBrushLifeMax", "mainBrushLife", "mainBrushLifeMax", "rollBrushLife", "rollBrushLifeMax", "hiparLife", "hiparLifeMax", "ragLife", "ragLifeMax"]

    __typenames__ = ["int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.sideBrushLife = 0
        self.sideBrushLifeMax = 0
        self.mainBrushLife = 0
        self.mainBrushLifeMax = 0
        self.rollBrushLife = 0
        self.rollBrushLifeMax = 0
        self.hiparLife = 0
        self.hiparLifeMax = 0
        self.ragLife = 0
        self.ragLifeMax = 0

    def encode(self):
        buf = BytesIO()
        buf.write(PartsLifeConfig._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hhhhhhhhhh", self.sideBrushLife, self.sideBrushLifeMax, self.mainBrushLife, self.mainBrushLifeMax, self.rollBrushLife, self.rollBrushLifeMax, self.hiparLife, self.hiparLifeMax, self.ragLife, self.ragLifeMax))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != PartsLifeConfig._get_packed_fingerprint():
            raise ValueError("Decode error")
        return PartsLifeConfig._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = PartsLifeConfig()
        self.sideBrushLife, self.sideBrushLifeMax, self.mainBrushLife, self.mainBrushLifeMax, self.rollBrushLife, self.rollBrushLifeMax, self.hiparLife, self.hiparLifeMax, self.ragLife, self.ragLifeMax = struct.unpack(">hhhhhhhhhh", buf.read(20))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if PartsLifeConfig in parents: return 0
        tmphash = (0x3690585bd6b94331) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if PartsLifeConfig._packed_fingerprint is None:
            PartsLifeConfig._packed_fingerprint = struct.pack(">Q", PartsLifeConfig._get_hash_recursive([]))
        return PartsLifeConfig._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", PartsLifeConfig._get_packed_fingerprint())[0]

