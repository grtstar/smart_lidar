"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mars_message.Point

class AppPath(object):
    __slots__ = ["id", "count", "points", "pointType", "degree"]

    __typenames__ = ["int16_t", "int16_t", "mars_message.Point", "int8_t", "float"]

    __dimensions__ = [None, None, ["count"], ["count"], None]

    def __init__(self):
        self.id = 0
        self.count = 0
        self.points = []
        self.pointType = []
        self.degree = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(AppPath._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hh", self.id, self.count))
        for i0 in range(self.count):
            assert self.points[i0]._get_packed_fingerprint() == mars_message.Point._get_packed_fingerprint()
            self.points[i0]._encode_one(buf)
        buf.write(struct.pack('>%db' % self.count, *self.pointType[:self.count]))
        buf.write(struct.pack(">f", self.degree))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != AppPath._get_packed_fingerprint():
            raise ValueError("Decode error")
        return AppPath._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = AppPath()
        self.id, self.count = struct.unpack(">hh", buf.read(4))
        self.points = []
        for i0 in range(self.count):
            self.points.append(mars_message.Point._decode_one(buf))
        self.pointType = struct.unpack('>%db' % self.count, buf.read(self.count))
        self.degree = struct.unpack(">f", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if AppPath in parents: return 0
        newparents = parents + [AppPath]
        tmphash = (0xdabae13ad88ac083+ mars_message.Point._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if AppPath._packed_fingerprint is None:
            AppPath._packed_fingerprint = struct.pack(">Q", AppPath._get_hash_recursive([]))
        return AppPath._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", AppPath._get_packed_fingerprint())[0]

