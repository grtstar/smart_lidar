"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mars_message.Polygon

import mars_message.AppRoomProperties

import mars_message.Pose

class AppMap(object):
    __slots__ = ["version", "mapId", "type", "width", "height", "origin", "resolution", "charger", "pointCount", "data", "roomNum", "roomPropeties", "roomName", "roomPolygon"]

    __typenames__ = ["int8_t", "int16_t", "int8_t", "int16_t", "int16_t", "mars_message.Pose", "float", "mars_message.Pose", "int32_t", "int8_t", "int16_t", "mars_message.AppRoomProperties", "string", "mars_message.Polygon"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, ["pointCount"], None, ["roomNum"], ["roomNum"], ["roomNum"]]

    def __init__(self):
        self.version = 0
        self.mapId = 0
        self.type = 0
        self.width = 0
        self.height = 0
        self.origin = mars_message.Pose()
        self.resolution = 0.0
        self.charger = mars_message.Pose()
        self.pointCount = 0
        self.data = []
        self.roomNum = 0
        self.roomPropeties = []
        self.roomName = []
        self.roomPolygon = []

    def encode(self):
        buf = BytesIO()
        buf.write(AppMap._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bhbhh", self.version, self.mapId, self.type, self.width, self.height))
        assert self.origin._get_packed_fingerprint() == mars_message.Pose._get_packed_fingerprint()
        self.origin._encode_one(buf)
        buf.write(struct.pack(">f", self.resolution))
        assert self.charger._get_packed_fingerprint() == mars_message.Pose._get_packed_fingerprint()
        self.charger._encode_one(buf)
        buf.write(struct.pack(">i", self.pointCount))
        buf.write(struct.pack('>%db' % self.pointCount, *self.data[:self.pointCount]))
        buf.write(struct.pack(">h", self.roomNum))
        for i0 in range(self.roomNum):
            assert self.roomPropeties[i0]._get_packed_fingerprint() == mars_message.AppRoomProperties._get_packed_fingerprint()
            self.roomPropeties[i0]._encode_one(buf)
        for i0 in range(self.roomNum):
            __roomName_encoded = self.roomName[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__roomName_encoded)+1))
            buf.write(__roomName_encoded)
            buf.write(b"\0")
        for i0 in range(self.roomNum):
            assert self.roomPolygon[i0]._get_packed_fingerprint() == mars_message.Polygon._get_packed_fingerprint()
            self.roomPolygon[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != AppMap._get_packed_fingerprint():
            raise ValueError("Decode error")
        return AppMap._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = AppMap()
        self.version, self.mapId, self.type, self.width, self.height = struct.unpack(">bhbhh", buf.read(8))
        self.origin = mars_message.Pose._decode_one(buf)
        self.resolution = struct.unpack(">f", buf.read(4))[0]
        self.charger = mars_message.Pose._decode_one(buf)
        self.pointCount = struct.unpack(">i", buf.read(4))[0]
        self.data = struct.unpack('>%db' % self.pointCount, buf.read(self.pointCount))
        self.roomNum = struct.unpack(">h", buf.read(2))[0]
        self.roomPropeties = []
        for i0 in range(self.roomNum):
            self.roomPropeties.append(mars_message.AppRoomProperties._decode_one(buf))
        self.roomName = []
        for i0 in range(self.roomNum):
            __roomName_len = struct.unpack('>I', buf.read(4))[0]
            self.roomName.append(buf.read(__roomName_len)[:-1].decode('utf-8', 'replace'))
        self.roomPolygon = []
        for i0 in range(self.roomNum):
            self.roomPolygon.append(mars_message.Polygon._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if AppMap in parents: return 0
        newparents = parents + [AppMap]
        tmphash = (0xdb662f04d8462b98+ mars_message.Pose._get_hash_recursive(newparents)+ mars_message.Pose._get_hash_recursive(newparents)+ mars_message.AppRoomProperties._get_hash_recursive(newparents)+ mars_message.Polygon._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if AppMap._packed_fingerprint is None:
            AppMap._packed_fingerprint = struct.pack(">Q", AppMap._get_hash_recursive([]))
        return AppMap._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", AppMap._get_packed_fingerprint())[0]

