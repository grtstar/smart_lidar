"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mars_message.RobotStatus

class SweeperStatus(object):
    __slots__ = ["mcuStatus", "runningState", "pauseStatus", "chargeStatus", "cleanMode", "cleanStatus", "cleanTime", "cleanArea", "suctionPower", "cistern", "wipe", "manualDirection", "edgeBrushLife", "rollBrushLife", "filterLife", "ragLife", "donotDisturb", "volume", "cleanAreaTotal", "cleanCountTotal", "cleanTimeTotal", "language", "dustCollectionNum", "dustCollectionSwitch", "mapState", "esimateArea", "carpetCleanPefer", "autoBoost", "childLock", "yMop"]

    __typenames__ = ["mars_message.RobotStatus", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "float", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.mcuStatus = mars_message.RobotStatus()
        self.runningState = 0
        self.pauseStatus = 0
        self.chargeStatus = 0
        self.cleanMode = 0
        self.cleanStatus = 0
        self.cleanTime = 0
        self.cleanArea = 0.0
        self.suctionPower = 0
        self.cistern = 0
        self.wipe = 0
        self.manualDirection = 0
        self.edgeBrushLife = 0
        self.rollBrushLife = 0
        self.filterLife = 0
        self.ragLife = 0
        self.donotDisturb = 0
        self.volume = 0
        self.cleanAreaTotal = 0
        self.cleanCountTotal = 0
        self.cleanTimeTotal = 0
        self.language = 0
        self.dustCollectionNum = 0
        self.dustCollectionSwitch = 0
        self.mapState = 0
        self.esimateArea = 0
        self.carpetCleanPefer = 0
        self.autoBoost = 0
        self.childLock = 0
        self.yMop = 0

    def encode(self):
        buf = BytesIO()
        buf.write(SweeperStatus._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.mcuStatus._get_packed_fingerprint() == mars_message.RobotStatus._get_packed_fingerprint()
        self.mcuStatus._encode_one(buf)
        buf.write(struct.pack(">iiiiiifiiiiiiiiiiiiiiiiiiiiii", self.runningState, self.pauseStatus, self.chargeStatus, self.cleanMode, self.cleanStatus, self.cleanTime, self.cleanArea, self.suctionPower, self.cistern, self.wipe, self.manualDirection, self.edgeBrushLife, self.rollBrushLife, self.filterLife, self.ragLife, self.donotDisturb, self.volume, self.cleanAreaTotal, self.cleanCountTotal, self.cleanTimeTotal, self.language, self.dustCollectionNum, self.dustCollectionSwitch, self.mapState, self.esimateArea, self.carpetCleanPefer, self.autoBoost, self.childLock, self.yMop))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != SweeperStatus._get_packed_fingerprint():
            raise ValueError("Decode error")
        return SweeperStatus._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = SweeperStatus()
        self.mcuStatus = mars_message.RobotStatus._decode_one(buf)
        self.runningState, self.pauseStatus, self.chargeStatus, self.cleanMode, self.cleanStatus, self.cleanTime, self.cleanArea, self.suctionPower, self.cistern, self.wipe, self.manualDirection, self.edgeBrushLife, self.rollBrushLife, self.filterLife, self.ragLife, self.donotDisturb, self.volume, self.cleanAreaTotal, self.cleanCountTotal, self.cleanTimeTotal, self.language, self.dustCollectionNum, self.dustCollectionSwitch, self.mapState, self.esimateArea, self.carpetCleanPefer, self.autoBoost, self.childLock, self.yMop = struct.unpack(">iiiiiifiiiiiiiiiiiiiiiiiiiiii", buf.read(116))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if SweeperStatus in parents: return 0
        newparents = parents + [SweeperStatus]
        tmphash = (0x89324595d0e0366c+ mars_message.RobotStatus._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if SweeperStatus._packed_fingerprint is None:
            SweeperStatus._packed_fingerprint = struct.pack(">Q", SweeperStatus._get_hash_recursive([]))
        return SweeperStatus._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", SweeperStatus._get_packed_fingerprint())[0]

