"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class TimedTaskInfo(object):
    __slots__ = ["valid", "weekDayMask", "time", "mapId", "roomN", "roomId", "zoomN", "zoodId", "cleanMode", "fan", "water", "cleanRepeat"]

    __typenames__ = ["int8_t", "int8_t", "int16_t", "int16_t", "int8_t", "int8_t", "int8_t", "int32_t", "int8_t", "int8_t", "int8_t", "int8_t"]

    __dimensions__ = [None, None, None, None, None, ["roomN"], None, ["zoomN"], None, None, None, None]

    def __init__(self):
        self.valid = 0
        self.weekDayMask = 0
        self.time = 0
        self.mapId = 0
        self.roomN = 0
        self.roomId = []
        self.zoomN = 0
        self.zoodId = []
        self.cleanMode = 0
        self.fan = 0
        self.water = 0
        self.cleanRepeat = 0

    def encode(self):
        buf = BytesIO()
        buf.write(TimedTaskInfo._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbhhb", self.valid, self.weekDayMask, self.time, self.mapId, self.roomN))
        buf.write(struct.pack('>%db' % self.roomN, *self.roomId[:self.roomN]))
        buf.write(struct.pack(">b", self.zoomN))
        buf.write(struct.pack('>%di' % self.zoomN, *self.zoodId[:self.zoomN]))
        buf.write(struct.pack(">bbbb", self.cleanMode, self.fan, self.water, self.cleanRepeat))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != TimedTaskInfo._get_packed_fingerprint():
            raise ValueError("Decode error")
        return TimedTaskInfo._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = TimedTaskInfo()
        self.valid, self.weekDayMask, self.time, self.mapId, self.roomN = struct.unpack(">bbhhb", buf.read(7))
        self.roomId = struct.unpack('>%db' % self.roomN, buf.read(self.roomN))
        self.zoomN = struct.unpack(">b", buf.read(1))[0]
        self.zoodId = struct.unpack('>%di' % self.zoomN, buf.read(self.zoomN * 4))
        self.cleanMode, self.fan, self.water, self.cleanRepeat = struct.unpack(">bbbb", buf.read(4))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if TimedTaskInfo in parents: return 0
        tmphash = (0x820b3b458e26156d) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if TimedTaskInfo._packed_fingerprint is None:
            TimedTaskInfo._packed_fingerprint = struct.pack(">Q", TimedTaskInfo._get_hash_recursive([]))
        return TimedTaskInfo._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", TimedTaskInfo._get_packed_fingerprint())[0]

