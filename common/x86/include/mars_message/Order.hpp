/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __mars_message_Order_hpp__
#define __mars_message_Order_hpp__

#include <lcm/lcm_coretypes.h>

#include <vector>
#include "mars_message/Time.hpp"
#include "mars_message/Component.hpp"

namespace mars_message
{

class Order
{
    public:
        int8_t     orderId;

        int32_t    sign;

        int8_t     valid;

        mars_message::Time time;

        int8_t     mode;

        int8_t     sweepPower;

        int8_t     mopPower;

        int8_t     componentCount;

        std::vector< mars_message::Component > components;

        int8_t     roomCount;

        std::vector< int8_t > rooms;

#ifdef __NLOHMANN_JSON_CPP
    public:
        NLOHMANN_DEFINE_TYPE_INTRUSIVE(Order, orderId, sign, valid, time, mode, sweepPower, mopPower, componentCount, components, roomCount, rooms)
#endif
#ifdef __MSGPACK
    public:
        MSGPACK_DEFINE(Order, orderId, sign, valid, time, mode, sweepPower, mopPower, componentCount, components, roomCount, rooms)
#endif
    public:
        bool operator==(const Order& other) const
        {
            return orderId == other.orderId && sign == other.sign && valid == other.valid && time == other.time && mode == other.mode && sweepPower == other.sweepPower && mopPower == other.mopPower && componentCount == other.componentCount && components == other.components && roomCount == other.roomCount && rooms == other.rooms;
        }
    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "Order"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int Order::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int Order::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int Order::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t Order::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* Order::getTypeName()
{
    return "Order";
}

int Order::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->orderId, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->sign, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->valid, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->time._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->mode, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->sweepPower, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->mopPower, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->componentCount, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->componentCount; a0++) {
        tlen = this->components[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->roomCount, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->roomCount > 0) {
        tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->rooms[0], this->roomCount);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int Order::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->orderId, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->sign, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->valid, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->time._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->mode, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->sweepPower, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->mopPower, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->componentCount, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->components.resize(this->componentCount);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->componentCount; a0++) {
        tlen = this->components[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->roomCount, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->roomCount) {
        this->rooms.resize(this->roomCount);
        tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->rooms[0], this->roomCount);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int Order::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += this->time._getEncodedSizeNoHash();
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->componentCount; a0++) {
        enc_size += this->components[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, this->roomCount);
    return enc_size;
}

uint64_t Order::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == Order::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, Order::getHash };

    uint64_t hash = 0x23d0ba046f4b8922LL +
         mars_message::Time::_computeHash(&cp) +
         mars_message::Component::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
