// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/in_location_inserter.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2fin_5flocation_5finserter_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2fin_5flocation_5finserter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace mapping {
namespace proto {
class InLocationInserterOptions;
class InLocationInserterOptionsDefaultTypeInternal;
extern InLocationInserterOptionsDefaultTypeInternal _InLocationInserterOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

namespace cartographer {
namespace mapping {
namespace proto {

namespace protobuf_cartographer_2fmapping_2fproto_2fin_5flocation_5finserter_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fin_5flocation_5finserter_2eproto

// ===================================================================

class InLocationInserterOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.InLocationInserterOptions) */ {
 public:
  InLocationInserterOptions();
  virtual ~InLocationInserterOptions();

  InLocationInserterOptions(const InLocationInserterOptions& from);

  inline InLocationInserterOptions& operator=(const InLocationInserterOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InLocationInserterOptions(InLocationInserterOptions&& from) noexcept
    : InLocationInserterOptions() {
    *this = ::std::move(from);
  }

  inline InLocationInserterOptions& operator=(InLocationInserterOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InLocationInserterOptions& default_instance();

  static inline const InLocationInserterOptions* internal_default_instance() {
    return reinterpret_cast<const InLocationInserterOptions*>(
               &_InLocationInserterOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(InLocationInserterOptions* other);
  friend void swap(InLocationInserterOptions& a, InLocationInserterOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InLocationInserterOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  InLocationInserterOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InLocationInserterOptions& from);
  void MergeFrom(const InLocationInserterOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InLocationInserterOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double donnot_insert_threshold = 1;
  void clear_donnot_insert_threshold();
  static const int kDonnotInsertThresholdFieldNumber = 1;
  double donnot_insert_threshold() const;
  void set_donnot_insert_threshold(double value);

  // double insert_point_threshold = 2;
  void clear_insert_point_threshold();
  static const int kInsertPointThresholdFieldNumber = 2;
  double insert_point_threshold() const;
  void set_insert_point_threshold(double value);

  // double max_hit_length = 3;
  void clear_max_hit_length();
  static const int kMaxHitLengthFieldNumber = 3;
  double max_hit_length() const;
  void set_max_hit_length(double value);

  // double max_miss_length = 4;
  void clear_max_miss_length();
  static const int kMaxMissLengthFieldNumber = 4;
  double max_miss_length() const;
  void set_max_miss_length(double value);

  // double hit_probability = 6;
  void clear_hit_probability();
  static const int kHitProbabilityFieldNumber = 6;
  double hit_probability() const;
  void set_hit_probability(double value);

  // int32 hit_tolerance_grid = 5;
  void clear_hit_tolerance_grid();
  static const int kHitToleranceGridFieldNumber = 5;
  ::google::protobuf::int32 hit_tolerance_grid() const;
  void set_hit_tolerance_grid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.InLocationInserterOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double donnot_insert_threshold_;
  double insert_point_threshold_;
  double max_hit_length_;
  double max_miss_length_;
  double hit_probability_;
  ::google::protobuf::int32 hit_tolerance_grid_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fin_5flocation_5finserter_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InLocationInserterOptions

// double donnot_insert_threshold = 1;
inline void InLocationInserterOptions::clear_donnot_insert_threshold() {
  donnot_insert_threshold_ = 0;
}
inline double InLocationInserterOptions::donnot_insert_threshold() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InLocationInserterOptions.donnot_insert_threshold)
  return donnot_insert_threshold_;
}
inline void InLocationInserterOptions::set_donnot_insert_threshold(double value) {
  
  donnot_insert_threshold_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.InLocationInserterOptions.donnot_insert_threshold)
}

// double insert_point_threshold = 2;
inline void InLocationInserterOptions::clear_insert_point_threshold() {
  insert_point_threshold_ = 0;
}
inline double InLocationInserterOptions::insert_point_threshold() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InLocationInserterOptions.insert_point_threshold)
  return insert_point_threshold_;
}
inline void InLocationInserterOptions::set_insert_point_threshold(double value) {
  
  insert_point_threshold_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.InLocationInserterOptions.insert_point_threshold)
}

// double max_hit_length = 3;
inline void InLocationInserterOptions::clear_max_hit_length() {
  max_hit_length_ = 0;
}
inline double InLocationInserterOptions::max_hit_length() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InLocationInserterOptions.max_hit_length)
  return max_hit_length_;
}
inline void InLocationInserterOptions::set_max_hit_length(double value) {
  
  max_hit_length_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.InLocationInserterOptions.max_hit_length)
}

// double max_miss_length = 4;
inline void InLocationInserterOptions::clear_max_miss_length() {
  max_miss_length_ = 0;
}
inline double InLocationInserterOptions::max_miss_length() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InLocationInserterOptions.max_miss_length)
  return max_miss_length_;
}
inline void InLocationInserterOptions::set_max_miss_length(double value) {
  
  max_miss_length_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.InLocationInserterOptions.max_miss_length)
}

// int32 hit_tolerance_grid = 5;
inline void InLocationInserterOptions::clear_hit_tolerance_grid() {
  hit_tolerance_grid_ = 0;
}
inline ::google::protobuf::int32 InLocationInserterOptions::hit_tolerance_grid() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InLocationInserterOptions.hit_tolerance_grid)
  return hit_tolerance_grid_;
}
inline void InLocationInserterOptions::set_hit_tolerance_grid(::google::protobuf::int32 value) {
  
  hit_tolerance_grid_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.InLocationInserterOptions.hit_tolerance_grid)
}

// double hit_probability = 6;
inline void InLocationInserterOptions::clear_hit_probability() {
  hit_probability_ = 0;
}
inline double InLocationInserterOptions::hit_probability() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InLocationInserterOptions.hit_probability)
  return hit_probability_;
}
inline void InLocationInserterOptions::set_hit_probability(double value) {
  
  hit_probability_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.InLocationInserterOptions.hit_probability)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2fin_5flocation_5finserter_2eproto__INCLUDED
