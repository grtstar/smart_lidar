"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

import mars_message.Time

class AppNotDisturbTime(object):
    __slots__ = ["version", "onoff", "timeZone", "starTime", "endTime", "startWeekDay", "endWeekDay"]

    __typenames__ = ["int8_t", "int8_t", "int8_t", "mars_message.Time", "mars_message.Time", "int8_t", "int8_t"]

    __dimensions__ = [None, None, None, None, None, None, None]

    def __init__(self):
        self.version = 0
        self.onoff = 0
        self.timeZone = 0
        self.starTime = mars_message.Time()
        self.endTime = mars_message.Time()
        self.startWeekDay = 0
        self.endWeekDay = 0

    def encode(self):
        buf = BytesIO()
        buf.write(AppNotDisturbTime._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbb", self.version, self.onoff, self.timeZone))
        assert self.starTime._get_packed_fingerprint() == mars_message.Time._get_packed_fingerprint()
        self.starTime._encode_one(buf)
        assert self.endTime._get_packed_fingerprint() == mars_message.Time._get_packed_fingerprint()
        self.endTime._encode_one(buf)
        buf.write(struct.pack(">bb", self.startWeekDay, self.endWeekDay))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != AppNotDisturbTime._get_packed_fingerprint():
            raise ValueError("Decode error")
        return AppNotDisturbTime._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = AppNotDisturbTime()
        self.version, self.onoff, self.timeZone = struct.unpack(">bbb", buf.read(3))
        self.starTime = mars_message.Time._decode_one(buf)
        self.endTime = mars_message.Time._decode_one(buf)
        self.startWeekDay, self.endWeekDay = struct.unpack(">bb", buf.read(2))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if AppNotDisturbTime in parents: return 0
        newparents = parents + [AppNotDisturbTime]
        tmphash = (0x7a2a04d31cdd382d+ mars_message.Time._get_hash_recursive(newparents)+ mars_message.Time._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if AppNotDisturbTime._packed_fingerprint is None:
            AppNotDisturbTime._packed_fingerprint = struct.pack(">Q", AppNotDisturbTime._get_hash_recursive([]))
        return AppNotDisturbTime._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", AppNotDisturbTime._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.version = j["version"]
        self.onoff = j["onoff"]
        self.timeZone = j["timeZone"]
        self.starTime.from_dict(j["starTime"])
        self.endTime.from_dict(j["endTime"])
        self.startWeekDay = j["startWeekDay"]
        self.endWeekDay = j["endWeekDay"]

    def to_dict(self):
        j = {}
        j["version"] = self.version
        j["onoff"] = self.onoff
        j["timeZone"] = self.timeZone
        j["starTime"] = self.starTime.to_dict()
        j["endTime"] = self.endTime.to_dict()
        j["startWeekDay"] = self.startWeekDay
        j["endWeekDay"] = self.endWeekDay
        return j

