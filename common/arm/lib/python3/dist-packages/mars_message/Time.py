"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

class Time(object):
    __slots__ = ["hour", "minute", "second"]

    __typenames__ = ["int8_t", "int8_t", "int8_t"]

    __dimensions__ = [None, None, None]

    def __init__(self):
        self.hour = 0
        self.minute = 0
        self.second = 0

    def encode(self):
        buf = BytesIO()
        buf.write(Time._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbb", self.hour, self.minute, self.second))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Time._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Time._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Time()
        self.hour, self.minute, self.second = struct.unpack(">bbb", buf.read(3))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if Time in parents: return 0
        tmphash = (0x760c20cfa05a6b0d) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Time._packed_fingerprint is None:
            Time._packed_fingerprint = struct.pack(">Q", Time._get_hash_recursive([]))
        return Time._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Time._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.hour = j["hour"]
        self.minute = j["minute"]
        self.second = j["second"]

    def to_dict(self):
        j = {}
        j["hour"] = self.hour
        j["minute"] = self.minute
        j["second"] = self.second
        return j

