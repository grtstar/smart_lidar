"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

class Date(object):
    __slots__ = ["year", "month", "day", "weekday"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "int32_t"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.year = 0
        self.month = 0
        self.day = 0
        self.weekday = 0

    def encode(self):
        buf = BytesIO()
        buf.write(Date._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiii", self.year, self.month, self.day, self.weekday))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Date._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Date._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Date()
        self.year, self.month, self.day, self.weekday = struct.unpack(">iiii", buf.read(16))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if Date in parents: return 0
        tmphash = (0x1fce872f17e98bb3) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Date._packed_fingerprint is None:
            Date._packed_fingerprint = struct.pack(">Q", Date._get_hash_recursive([]))
        return Date._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Date._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.year = j["year"]
        self.month = j["month"]
        self.day = j["day"]
        self.weekday = j["weekday"]

    def to_dict(self):
        j = {}
        j["year"] = self.year
        j["month"] = self.month
        j["day"] = self.day
        j["weekday"] = self.weekday
        return j

