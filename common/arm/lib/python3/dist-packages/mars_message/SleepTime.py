"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import json

import mars_message.Time

class SleepTime(object):
    __slots__ = ["start", "end"]

    __typenames__ = ["mars_message.Time", "mars_message.Time"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.start = mars_message.Time()
        self.end = mars_message.Time()

    def encode(self):
        buf = BytesIO()
        buf.write(SleepTime._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.start._get_packed_fingerprint() == mars_message.Time._get_packed_fingerprint()
        self.start._encode_one(buf)
        assert self.end._get_packed_fingerprint() == mars_message.Time._get_packed_fingerprint()
        self.end._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != SleepTime._get_packed_fingerprint():
            raise ValueError("Decode error")
        return SleepTime._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = SleepTime()
        self.start = mars_message.Time._decode_one(buf)
        self.end = mars_message.Time._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if SleepTime in parents: return 0
        newparents = parents + [SleepTime]
        tmphash = (0x96dcacf370554cc3+ mars_message.Time._get_hash_recursive(newparents)+ mars_message.Time._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if SleepTime._packed_fingerprint is None:
            SleepTime._packed_fingerprint = struct.pack(">Q", SleepTime._get_hash_recursive([]))
        return SleepTime._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", SleepTime._get_packed_fingerprint())[0]

    def from_dict(self, j):
        self.start.from_dict(j["start"])
        self.end.from_dict(j["end"])

    def to_dict(self):
        j = {}
        j["start"] = self.start.to_dict()
        j["end"] = self.end.to_dict()
        return j

