/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __mars_message_Marker_hpp__
#define __mars_message_Marker_hpp__

#include <lcm/lcm_coretypes.h>

#include <string>
#include <vector>
#include "mars_message/Pose.hpp"
#include "mars_message/Vector3.hpp"
#include "mars_message/ColorRGBA.hpp"
#include "mars_message/Point.hpp"
#include "mars_message/ColorRGBA.hpp"

namespace mars_message
{

class Marker
{
    public:
        int64_t    timestampMs;

        std::string ns;

        int32_t    id;

        int32_t    type;

        int32_t    action;

        mars_message::Pose pose;

        mars_message::Vector3 scale;

        mars_message::ColorRGBA color;

        int32_t    lifetime;

        int32_t    frame_locked;

        int32_t    pointCount;

        std::vector< mars_message::Point > points;

        std::vector< mars_message::ColorRGBA > colors;

        std::string text;

        std::string mesh_resource;

        int32_t    mesh_use_embeded_materials;

#ifdef __NLOHMANN_JSON_CPP
    public:
        NLOHMANN_DEFINE_TYPE_INTRUSIVE(Marker, timestampMs, ns, id, type, action, pose, scale, color, lifetime, frame_locked, pointCount, points, colors, text, mesh_resource, mesh_use_embeded_materials)
#endif
    public:
        bool operator==(const Marker& other) const
        {
            return timestampMs == other.timestampMs && ns == other.ns && id == other.id && type == other.type && action == other.action && pose == other.pose && scale == other.scale && color == other.color && lifetime == other.lifetime && frame_locked == other.frame_locked && pointCount == other.pointCount && points == other.points && colors == other.colors && text == other.text && mesh_resource == other.mesh_resource && mesh_use_embeded_materials == other.mesh_use_embeded_materials;
        }
    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "Marker"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int Marker::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int Marker::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int Marker::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t Marker::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* Marker::getTypeName()
{
    return "Marker";
}

int Marker::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->timestampMs, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* ns_cstr = const_cast<char*>(this->ns.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &ns_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->id, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->type, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->action, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->pose._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->scale._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->color._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->lifetime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->frame_locked, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->pointCount, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->pointCount; a0++) {
        tlen = this->points[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->pointCount; a0++) {
        tlen = this->colors[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    char* text_cstr = const_cast<char*>(this->text.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &text_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* mesh_resource_cstr = const_cast<char*>(this->mesh_resource.c_str());
    tlen = __string_encode_array(
        buf, offset + pos, maxlen - pos, &mesh_resource_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->mesh_use_embeded_materials, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int Marker::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->timestampMs, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    int32_t __ns_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__ns_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__ns_len__ > maxlen - pos) return -1;
    this->ns.assign(
        static_cast<const char*>(buf) + offset + pos, __ns_len__ - 1);
    pos += __ns_len__;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->id, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->type, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->action, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->pose._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->scale._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->color._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->lifetime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->frame_locked, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->pointCount, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->points.resize(this->pointCount);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->pointCount; a0++) {
        tlen = this->points[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    try {
        this->colors.resize(this->pointCount);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->pointCount; a0++) {
        tlen = this->colors[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    int32_t __text_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__text_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__text_len__ > maxlen - pos) return -1;
    this->text.assign(
        static_cast<const char*>(buf) + offset + pos, __text_len__ - 1);
    pos += __text_len__;

    int32_t __mesh_resource_len__;
    tlen = __int32_t_decode_array(
        buf, offset + pos, maxlen - pos, &__mesh_resource_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__mesh_resource_len__ > maxlen - pos) return -1;
    this->mesh_resource.assign(
        static_cast<const char*>(buf) + offset + pos, __mesh_resource_len__ - 1);
    pos += __mesh_resource_len__;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->mesh_use_embeded_materials, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int Marker::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += this->ns.size() + 4 + 1;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += this->pose._getEncodedSizeNoHash();
    enc_size += this->scale._getEncodedSizeNoHash();
    enc_size += this->color._getEncodedSizeNoHash();
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->pointCount; a0++) {
        enc_size += this->points[a0]._getEncodedSizeNoHash();
    }
    for (int a0 = 0; a0 < this->pointCount; a0++) {
        enc_size += this->colors[a0]._getEncodedSizeNoHash();
    }
    enc_size += this->text.size() + 4 + 1;
    enc_size += this->mesh_resource.size() + 4 + 1;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t Marker::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == Marker::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, Marker::getHash };

    uint64_t hash = 0xc9c9669d7612f260LL +
         mars_message::Pose::_computeHash(&cp) +
         mars_message::Vector3::_computeHash(&cp) +
         mars_message::ColorRGBA::_computeHash(&cp) +
         mars_message::Point::_computeHash(&cp) +
         mars_message::ColorRGBA::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
