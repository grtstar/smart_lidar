/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __baofei_message_Map_hpp__
#define __baofei_message_Map_hpp__

#include <lcm/lcm_coretypes.h>

#include <vector>
#include "baofei_message/Grid2d.hpp"
#include "baofei_message/Grid2d.hpp"
#include "baofei_message/Grid2d.hpp"
#include "baofei_message/Grid2d.hpp"
#include "baofei_message/Grid2d.hpp"
#include "baofei_message/Grid2d.hpp"
#include "baofei_message/RectAreas.hpp"
#include "baofei_message/RectArea.hpp"
#include "baofei_message/RectArea.hpp"
#include "baofei_message/Forbbiden.hpp"
#include "baofei_message/Region.hpp"
#include "baofei_message/RegionRelation.hpp"
#include "baofei_message/RegionRelation.hpp"
#include "baofei_message/Object.hpp"

namespace baofei_message
{

class Map
{
    public:
        int8_t     version;

        int32_t    mapType;

        int32_t    mapSign;

        int32_t    width;

        int32_t    height;

        int32_t    mapCount;

        std::vector< int8_t > map;

        int32_t    pathCount;

        std::vector< baofei_message::Grid2d > path;

        std::vector< int8_t > pathAttr;

        baofei_message::Grid2d chargePos;

        baofei_message::Grid2d robotPos;

        float      robotAngle;

        baofei_message::Grid2d center;

        baofei_message::Grid2d leftMax;

        baofei_message::Grid2d rightMax;

        int32_t    cleanArea;

        int32_t    cleanTime;

        int32_t    cleanModule;

        int32_t    cleanSign;

        baofei_message::RectAreas cleanAreas;

        baofei_message::RectArea pointArea;

        baofei_message::RectArea pointPoint;

        baofei_message::Forbbiden forbbiden;

        int8_t     regionNum;

        std::vector< baofei_message::Region > region;

        int8_t     relationPhycialNum;

        std::vector< baofei_message::RegionRelation > phycialRelation;

        int8_t     relationLogicNum;

        std::vector< baofei_message::RegionRelation > logicRelation;

        int32_t    objectCount;

        std::vector< baofei_message::Object > aiVison;

        int8_t     isFormalMap;

        int8_t     isSaveToFlash;

        int32_t    objectMapCount;

        std::vector< int8_t > objectMap;

#ifdef __NLOHMANN_JSON_CPP
    public:
        NLOHMANN_DEFINE_TYPE_INTRUSIVE(Map, version, mapType, mapSign, width, height, mapCount, map, pathCount, path, pathAttr, chargePos, robotPos, robotAngle, center, leftMax, rightMax, cleanArea, cleanTime, cleanModule, cleanSign, cleanAreas, pointArea, pointPoint, forbbiden, regionNum, region, relationPhycialNum, phycialRelation, relationLogicNum, logicRelation, objectCount, aiVison, isFormalMap, isSaveToFlash, objectMapCount, objectMap)
#endif
#ifdef __MSGPACK
    public:
        MSGPACK_DEFINE(Map, version, mapType, mapSign, width, height, mapCount, map, pathCount, path, pathAttr, chargePos, robotPos, robotAngle, center, leftMax, rightMax, cleanArea, cleanTime, cleanModule, cleanSign, cleanAreas, pointArea, pointPoint, forbbiden, regionNum, region, relationPhycialNum, phycialRelation, relationLogicNum, logicRelation, objectCount, aiVison, isFormalMap, isSaveToFlash, objectMapCount, objectMap)
#endif
    public:
        bool operator==(const Map& other) const
        {
            return version == other.version && mapType == other.mapType && mapSign == other.mapSign && width == other.width && height == other.height && mapCount == other.mapCount && map == other.map && pathCount == other.pathCount && path == other.path && pathAttr == other.pathAttr && chargePos == other.chargePos && robotPos == other.robotPos && robotAngle == other.robotAngle && center == other.center && leftMax == other.leftMax && rightMax == other.rightMax && cleanArea == other.cleanArea && cleanTime == other.cleanTime && cleanModule == other.cleanModule && cleanSign == other.cleanSign && cleanAreas == other.cleanAreas && pointArea == other.pointArea && pointPoint == other.pointPoint && forbbiden == other.forbbiden && regionNum == other.regionNum && region == other.region && relationPhycialNum == other.relationPhycialNum && phycialRelation == other.phycialRelation && relationLogicNum == other.relationLogicNum && logicRelation == other.logicRelation && objectCount == other.objectCount && aiVison == other.aiVison && isFormalMap == other.isFormalMap && isSaveToFlash == other.isSaveToFlash && objectMapCount == other.objectMapCount && objectMap == other.objectMap;
        }
    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "Map"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int Map::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int Map::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int Map::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t Map::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* Map::getTypeName()
{
    return "Map";
}

int Map::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->version, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->mapType, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->mapSign, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->width, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->height, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->mapCount, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->mapCount > 0) {
        tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->map[0], this->mapCount);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->pathCount, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->pathCount; a0++) {
        tlen = this->path[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->pathCount > 0) {
        tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->pathAttr[0], this->pathCount);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = this->chargePos._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->robotPos._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->robotAngle, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->center._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->leftMax._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->rightMax._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->cleanArea, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->cleanTime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->cleanModule, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->cleanSign, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->cleanAreas._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->pointArea._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->pointPoint._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->forbbiden._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->regionNum, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->regionNum; a0++) {
        tlen = this->region[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->relationPhycialNum, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->relationPhycialNum; a0++) {
        tlen = this->phycialRelation[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->relationLogicNum, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->relationLogicNum; a0++) {
        tlen = this->logicRelation[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->objectCount, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->objectCount; a0++) {
        tlen = this->aiVison[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->isFormalMap, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->isSaveToFlash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->objectMapCount, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->objectMapCount > 0) {
        tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->objectMap[0], this->objectMapCount);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int Map::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->version, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->mapType, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->mapSign, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->width, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->height, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->mapCount, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->mapCount) {
        this->map.resize(this->mapCount);
        tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->map[0], this->mapCount);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->pathCount, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->path.resize(this->pathCount);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->pathCount; a0++) {
        tlen = this->path[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->pathCount) {
        this->pathAttr.resize(this->pathCount);
        tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->pathAttr[0], this->pathCount);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = this->chargePos._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->robotPos._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->robotAngle, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->center._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->leftMax._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->rightMax._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->cleanArea, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->cleanTime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->cleanModule, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->cleanSign, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->cleanAreas._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->pointArea._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->pointPoint._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->forbbiden._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->regionNum, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->region.resize(this->regionNum);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->regionNum; a0++) {
        tlen = this->region[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->relationPhycialNum, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->phycialRelation.resize(this->relationPhycialNum);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->relationPhycialNum; a0++) {
        tlen = this->phycialRelation[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->relationLogicNum, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->logicRelation.resize(this->relationLogicNum);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->relationLogicNum; a0++) {
        tlen = this->logicRelation[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->objectCount, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->aiVison.resize(this->objectCount);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->objectCount; a0++) {
        tlen = this->aiVison[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->isFormalMap, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->isSaveToFlash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->objectMapCount, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->objectMapCount) {
        this->objectMap.resize(this->objectMapCount);
        tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->objectMap[0], this->objectMapCount);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int Map::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, this->mapCount);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->pathCount; a0++) {
        enc_size += this->path[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int8_t_encoded_array_size(NULL, this->pathCount);
    enc_size += this->chargePos._getEncodedSizeNoHash();
    enc_size += this->robotPos._getEncodedSizeNoHash();
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += this->center._getEncodedSizeNoHash();
    enc_size += this->leftMax._getEncodedSizeNoHash();
    enc_size += this->rightMax._getEncodedSizeNoHash();
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += this->cleanAreas._getEncodedSizeNoHash();
    enc_size += this->pointArea._getEncodedSizeNoHash();
    enc_size += this->pointPoint._getEncodedSizeNoHash();
    enc_size += this->forbbiden._getEncodedSizeNoHash();
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->regionNum; a0++) {
        enc_size += this->region[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->relationPhycialNum; a0++) {
        enc_size += this->phycialRelation[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->relationLogicNum; a0++) {
        enc_size += this->logicRelation[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->objectCount; a0++) {
        enc_size += this->aiVison[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, this->objectMapCount);
    return enc_size;
}

uint64_t Map::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == Map::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, Map::getHash };

    uint64_t hash = 0xd35b622beebed2e8LL +
         baofei_message::Grid2d::_computeHash(&cp) +
         baofei_message::Grid2d::_computeHash(&cp) +
         baofei_message::Grid2d::_computeHash(&cp) +
         baofei_message::Grid2d::_computeHash(&cp) +
         baofei_message::Grid2d::_computeHash(&cp) +
         baofei_message::Grid2d::_computeHash(&cp) +
         baofei_message::RectAreas::_computeHash(&cp) +
         baofei_message::RectArea::_computeHash(&cp) +
         baofei_message::RectArea::_computeHash(&cp) +
         baofei_message::Forbbiden::_computeHash(&cp) +
         baofei_message::Region::_computeHash(&cp) +
         baofei_message::RegionRelation::_computeHash(&cp) +
         baofei_message::RegionRelation::_computeHash(&cp) +
         baofei_message::Object::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
