"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mars_message.Point

import mars_message.Vector3

import mars_message.Pose

import mars_message.ColorRGBA

class Marker(object):
    __slots__ = ["timestampMs", "ns", "id", "type", "action", "pose", "scale", "color", "lifetime", "frame_locked", "pointCount", "points", "colors", "text", "mesh_resource", "mesh_use_embeded_materials"]

    __typenames__ = ["int64_t", "string", "int32_t", "int32_t", "int32_t", "mars_message.Pose", "mars_message.Vector3", "mars_message.ColorRGBA", "int32_t", "int32_t", "int32_t", "mars_message.Point", "mars_message.ColorRGBA", "string", "string", "int32_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, ["pointCount"], ["pointCount"], None, None, None]

    def __init__(self):
        self.timestampMs = 0
        self.ns = ""
        self.id = 0
        self.type = 0
        self.action = 0
        self.pose = mars_message.Pose()
        self.scale = mars_message.Vector3()
        self.color = mars_message.ColorRGBA()
        self.lifetime = 0
        self.frame_locked = 0
        self.pointCount = 0
        self.points = []
        self.colors = []
        self.text = ""
        self.mesh_resource = ""
        self.mesh_use_embeded_materials = 0

    def encode(self):
        buf = BytesIO()
        buf.write(Marker._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestampMs))
        __ns_encoded = self.ns.encode('utf-8')
        buf.write(struct.pack('>I', len(__ns_encoded)+1))
        buf.write(__ns_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">iii", self.id, self.type, self.action))
        assert self.pose._get_packed_fingerprint() == mars_message.Pose._get_packed_fingerprint()
        self.pose._encode_one(buf)
        assert self.scale._get_packed_fingerprint() == mars_message.Vector3._get_packed_fingerprint()
        self.scale._encode_one(buf)
        assert self.color._get_packed_fingerprint() == mars_message.ColorRGBA._get_packed_fingerprint()
        self.color._encode_one(buf)
        buf.write(struct.pack(">iii", self.lifetime, self.frame_locked, self.pointCount))
        for i0 in range(self.pointCount):
            assert self.points[i0]._get_packed_fingerprint() == mars_message.Point._get_packed_fingerprint()
            self.points[i0]._encode_one(buf)
        for i0 in range(self.pointCount):
            assert self.colors[i0]._get_packed_fingerprint() == mars_message.ColorRGBA._get_packed_fingerprint()
            self.colors[i0]._encode_one(buf)
        __text_encoded = self.text.encode('utf-8')
        buf.write(struct.pack('>I', len(__text_encoded)+1))
        buf.write(__text_encoded)
        buf.write(b"\0")
        __mesh_resource_encoded = self.mesh_resource.encode('utf-8')
        buf.write(struct.pack('>I', len(__mesh_resource_encoded)+1))
        buf.write(__mesh_resource_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.mesh_use_embeded_materials))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Marker._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Marker._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Marker()
        self.timestampMs = struct.unpack(">q", buf.read(8))[0]
        __ns_len = struct.unpack('>I', buf.read(4))[0]
        self.ns = buf.read(__ns_len)[:-1].decode('utf-8', 'replace')
        self.id, self.type, self.action = struct.unpack(">iii", buf.read(12))
        self.pose = mars_message.Pose._decode_one(buf)
        self.scale = mars_message.Vector3._decode_one(buf)
        self.color = mars_message.ColorRGBA._decode_one(buf)
        self.lifetime, self.frame_locked, self.pointCount = struct.unpack(">iii", buf.read(12))
        self.points = []
        for i0 in range(self.pointCount):
            self.points.append(mars_message.Point._decode_one(buf))
        self.colors = []
        for i0 in range(self.pointCount):
            self.colors.append(mars_message.ColorRGBA._decode_one(buf))
        __text_len = struct.unpack('>I', buf.read(4))[0]
        self.text = buf.read(__text_len)[:-1].decode('utf-8', 'replace')
        __mesh_resource_len = struct.unpack('>I', buf.read(4))[0]
        self.mesh_resource = buf.read(__mesh_resource_len)[:-1].decode('utf-8', 'replace')
        self.mesh_use_embeded_materials = struct.unpack(">i", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if Marker in parents: return 0
        newparents = parents + [Marker]
        tmphash = (0xc9c9669d7612f260+ mars_message.Pose._get_hash_recursive(newparents)+ mars_message.Vector3._get_hash_recursive(newparents)+ mars_message.ColorRGBA._get_hash_recursive(newparents)+ mars_message.Point._get_hash_recursive(newparents)+ mars_message.ColorRGBA._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Marker._packed_fingerprint is None:
            Marker._packed_fingerprint = struct.pack(">Q", Marker._get_hash_recursive([]))
        return Marker._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Marker._get_packed_fingerprint())[0]

