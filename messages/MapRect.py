"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mars_message.Pose

class MapRect(object):
    __slots__ = ["validNum", "w", "h", "origin"]

    __typenames__ = ["int32_t", "float", "float", "mars_message.Pose"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.validNum = 0
        self.w = 0.0
        self.h = 0.0
        self.origin = mars_message.Pose()

    def encode(self):
        buf = BytesIO()
        buf.write(MapRect._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iff", self.validNum, self.w, self.h))
        assert self.origin._get_packed_fingerprint() == mars_message.Pose._get_packed_fingerprint()
        self.origin._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != MapRect._get_packed_fingerprint():
            raise ValueError("Decode error")
        return MapRect._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = MapRect()
        self.validNum, self.w, self.h = struct.unpack(">iff", buf.read(12))
        self.origin = mars_message.Pose._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if MapRect in parents: return 0
        newparents = parents + [MapRect]
        tmphash = (0x6f32805f929d9e2c+ mars_message.Pose._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if MapRect._packed_fingerprint is None:
            MapRect._packed_fingerprint = struct.pack(">Q", MapRect._get_hash_recursive([]))
        return MapRect._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", MapRect._get_packed_fingerprint())[0]

