"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mars_message.Order

class Orders(object):
    __slots__ = ["num", "orders"]

    __typenames__ = ["int32_t", "mars_message.Order"]

    __dimensions__ = [None, ["num"]]

    def __init__(self):
        self.num = 0
        self.orders = []

    def encode(self):
        buf = BytesIO()
        buf.write(Orders._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.num))
        for i0 in range(self.num):
            assert self.orders[i0]._get_packed_fingerprint() == mars_message.Order._get_packed_fingerprint()
            self.orders[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Orders._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Orders._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Orders()
        self.num = struct.unpack(">i", buf.read(4))[0]
        self.orders = []
        for i0 in range(self.num):
            self.orders.append(mars_message.Order._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if Orders in parents: return 0
        newparents = parents + [Orders]
        tmphash = (0xf8f050528a1d2764+ mars_message.Order._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Orders._packed_fingerprint is None:
            Orders._packed_fingerprint = struct.pack(">Q", Orders._get_hash_recursive([]))
        return Orders._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Orders._get_packed_fingerprint())[0]

