"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mars_message.Polygon

class Zone(object):
    __slots__ = ["count", "polygon", "name"]

    __typenames__ = ["int8_t", "mars_message.Polygon", "string"]

    __dimensions__ = [None, ["count"], ["count"]]

    def __init__(self):
        self.count = 0
        self.polygon = []
        self.name = []

    def encode(self):
        buf = BytesIO()
        buf.write(Zone._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.count))
        for i0 in range(self.count):
            assert self.polygon[i0]._get_packed_fingerprint() == mars_message.Polygon._get_packed_fingerprint()
            self.polygon[i0]._encode_one(buf)
        for i0 in range(self.count):
            __name_encoded = self.name[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__name_encoded)+1))
            buf.write(__name_encoded)
            buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Zone._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Zone._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Zone()
        self.count = struct.unpack(">b", buf.read(1))[0]
        self.polygon = []
        for i0 in range(self.count):
            self.polygon.append(mars_message.Polygon._decode_one(buf))
        self.name = []
        for i0 in range(self.count):
            __name_len = struct.unpack('>I', buf.read(4))[0]
            self.name.append(buf.read(__name_len)[:-1].decode('utf-8', 'replace'))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if Zone in parents: return 0
        newparents = parents + [Zone]
        tmphash = (0x4803f3bac9efd03a+ mars_message.Polygon._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Zone._packed_fingerprint is None:
            Zone._packed_fingerprint = struct.pack(">Q", Zone._get_hash_recursive([]))
        return Zone._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Zone._get_packed_fingerprint())[0]

