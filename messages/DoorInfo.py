"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mars_message.Point

class DoorInfo(object):
    __slots__ = ["_1", "_2", "minId", "maxId"]

    __typenames__ = ["mars_message.Point", "mars_message.Point", "int32_t", "int32_t"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self._1 = mars_message.Point()
        self._2 = mars_message.Point()
        self.minId = 0
        self.maxId = 0

    def encode(self):
        buf = BytesIO()
        buf.write(DoorInfo._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self._1._get_packed_fingerprint() == mars_message.Point._get_packed_fingerprint()
        self._1._encode_one(buf)
        assert self._2._get_packed_fingerprint() == mars_message.Point._get_packed_fingerprint()
        self._2._encode_one(buf)
        buf.write(struct.pack(">ii", self.minId, self.maxId))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != DoorInfo._get_packed_fingerprint():
            raise ValueError("Decode error")
        return DoorInfo._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = DoorInfo()
        self._1 = mars_message.Point._decode_one(buf)
        self._2 = mars_message.Point._decode_one(buf)
        self.minId, self.maxId = struct.unpack(">ii", buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if DoorInfo in parents: return 0
        newparents = parents + [DoorInfo]
        tmphash = (0x8ebc4bbab7432978+ mars_message.Point._get_hash_recursive(newparents)+ mars_message.Point._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if DoorInfo._packed_fingerprint is None:
            DoorInfo._packed_fingerprint = struct.pack(">Q", DoorInfo._get_hash_recursive([]))
        return DoorInfo._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", DoorInfo._get_packed_fingerprint())[0]

