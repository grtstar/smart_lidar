"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class OverloadConfig(object):
    __slots__ = ["wheel", "sideBrush", "mainBrush", "rollBrush", "liftMotor", "waterPump", "sewagePump", "airPump", "fanPump"]

    __typenames__ = ["int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.wheel = 0
        self.sideBrush = 0
        self.mainBrush = 0
        self.rollBrush = 0
        self.liftMotor = 0
        self.waterPump = 0
        self.sewagePump = 0
        self.airPump = 0
        self.fanPump = 0

    def encode(self):
        buf = BytesIO()
        buf.write(OverloadConfig._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hhhhhhhhh", self.wheel, self.sideBrush, self.mainBrush, self.rollBrush, self.liftMotor, self.waterPump, self.sewagePump, self.airPump, self.fanPump))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != OverloadConfig._get_packed_fingerprint():
            raise ValueError("Decode error")
        return OverloadConfig._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = OverloadConfig()
        self.wheel, self.sideBrush, self.mainBrush, self.rollBrush, self.liftMotor, self.waterPump, self.sewagePump, self.airPump, self.fanPump = struct.unpack(">hhhhhhhhh", buf.read(18))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if OverloadConfig in parents: return 0
        tmphash = (0x838117001aa71f42) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if OverloadConfig._packed_fingerprint is None:
            OverloadConfig._packed_fingerprint = struct.pack(">Q", OverloadConfig._get_hash_recursive([]))
        return OverloadConfig._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", OverloadConfig._get_packed_fingerprint())[0]

