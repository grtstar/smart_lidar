"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mars_message.Enum

import mars_message.CleanComponents

import mars_message.Time

class Order(object):
    __slots__ = ["orderId", "valid", "time", "mode", "cleanComponent", "roomCount", "rooms"]

    __typenames__ = ["int8_t", "int8_t", "mars_message.Time", "mars_message.Enum", "mars_message.CleanComponents", "int8_t", "int8_t"]

    __dimensions__ = [None, None, None, None, None, None, ["roomCount"]]

    def __init__(self):
        self.orderId = 0
        self.valid = 0
        self.time = mars_message.Time()
        self.mode = mars_message.Enum()
        self.cleanComponent = mars_message.CleanComponents()
        self.roomCount = 0
        self.rooms = []

    def encode(self):
        buf = BytesIO()
        buf.write(Order._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bb", self.orderId, self.valid))
        assert self.time._get_packed_fingerprint() == mars_message.Time._get_packed_fingerprint()
        self.time._encode_one(buf)
        assert self.mode._get_packed_fingerprint() == mars_message.Enum._get_packed_fingerprint()
        self.mode._encode_one(buf)
        assert self.cleanComponent._get_packed_fingerprint() == mars_message.CleanComponents._get_packed_fingerprint()
        self.cleanComponent._encode_one(buf)
        buf.write(struct.pack(">b", self.roomCount))
        buf.write(struct.pack('>%db' % self.roomCount, *self.rooms[:self.roomCount]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Order._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Order._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Order()
        self.orderId, self.valid = struct.unpack(">bb", buf.read(2))
        self.time = mars_message.Time._decode_one(buf)
        self.mode = mars_message.Enum._decode_one(buf)
        self.cleanComponent = mars_message.CleanComponents._decode_one(buf)
        self.roomCount = struct.unpack(">b", buf.read(1))[0]
        self.rooms = struct.unpack('>%db' % self.roomCount, buf.read(self.roomCount))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if Order in parents: return 0
        newparents = parents + [Order]
        tmphash = (0x371f6ff4995fa2a9+ mars_message.Time._get_hash_recursive(newparents)+ mars_message.Enum._get_hash_recursive(newparents)+ mars_message.CleanComponents._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Order._packed_fingerprint is None:
            Order._packed_fingerprint = struct.pack(">Q", Order._get_hash_recursive([]))
        return Order._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Order._get_packed_fingerprint())[0]

