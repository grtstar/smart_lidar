"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mars_message.MapRect

class RoomPropety(object):
    __slots__ = ["roomNo", "roomArea", "roomName", "cleanOrder", "cleanRepeat", "mopRepeat", "colorOrder", "donotSweep", "donotMop", "fanPower", "waterLevel", "enableYMop"]

    __typenames__ = ["int32_t", "mars_message.MapRect", "string", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.roomNo = 0
        self.roomArea = mars_message.MapRect()
        self.roomName = ""
        self.cleanOrder = 0
        self.cleanRepeat = 0
        self.mopRepeat = 0
        self.colorOrder = 0
        self.donotSweep = 0
        self.donotMop = 0
        self.fanPower = 0
        self.waterLevel = 0
        self.enableYMop = 0

    def encode(self):
        buf = BytesIO()
        buf.write(RoomPropety._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.roomNo))
        assert self.roomArea._get_packed_fingerprint() == mars_message.MapRect._get_packed_fingerprint()
        self.roomArea._encode_one(buf)
        __roomName_encoded = self.roomName.encode('utf-8')
        buf.write(struct.pack('>I', len(__roomName_encoded)+1))
        buf.write(__roomName_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">iiiiiiiii", self.cleanOrder, self.cleanRepeat, self.mopRepeat, self.colorOrder, self.donotSweep, self.donotMop, self.fanPower, self.waterLevel, self.enableYMop))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != RoomPropety._get_packed_fingerprint():
            raise ValueError("Decode error")
        return RoomPropety._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = RoomPropety()
        self.roomNo = struct.unpack(">i", buf.read(4))[0]
        self.roomArea = mars_message.MapRect._decode_one(buf)
        __roomName_len = struct.unpack('>I', buf.read(4))[0]
        self.roomName = buf.read(__roomName_len)[:-1].decode('utf-8', 'replace')
        self.cleanOrder, self.cleanRepeat, self.mopRepeat, self.colorOrder, self.donotSweep, self.donotMop, self.fanPower, self.waterLevel, self.enableYMop = struct.unpack(">iiiiiiiii", buf.read(36))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if RoomPropety in parents: return 0
        newparents = parents + [RoomPropety]
        tmphash = (0x5061726d461d805b+ mars_message.MapRect._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if RoomPropety._packed_fingerprint is None:
            RoomPropety._packed_fingerprint = struct.pack(">Q", RoomPropety._get_hash_recursive([]))
        return RoomPropety._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", RoomPropety._get_packed_fingerprint())[0]

