"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mars_message.Component

class CleanComponents(object):
    __slots__ = ["sideBrush", "mainBrush", "roller", "waterTank", "mop", "waterPump", "fan"]

    __typenames__ = ["mars_message.Component", "mars_message.Component", "mars_message.Component", "mars_message.Component", "mars_message.Component", "mars_message.Component", "mars_message.Component"]

    __dimensions__ = [None, None, None, None, None, None, None]

    def __init__(self):
        self.sideBrush = mars_message.Component()
        self.mainBrush = mars_message.Component()
        self.roller = mars_message.Component()
        self.waterTank = mars_message.Component()
        self.mop = mars_message.Component()
        self.waterPump = mars_message.Component()
        self.fan = mars_message.Component()

    def encode(self):
        buf = BytesIO()
        buf.write(CleanComponents._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.sideBrush._get_packed_fingerprint() == mars_message.Component._get_packed_fingerprint()
        self.sideBrush._encode_one(buf)
        assert self.mainBrush._get_packed_fingerprint() == mars_message.Component._get_packed_fingerprint()
        self.mainBrush._encode_one(buf)
        assert self.roller._get_packed_fingerprint() == mars_message.Component._get_packed_fingerprint()
        self.roller._encode_one(buf)
        assert self.waterTank._get_packed_fingerprint() == mars_message.Component._get_packed_fingerprint()
        self.waterTank._encode_one(buf)
        assert self.mop._get_packed_fingerprint() == mars_message.Component._get_packed_fingerprint()
        self.mop._encode_one(buf)
        assert self.waterPump._get_packed_fingerprint() == mars_message.Component._get_packed_fingerprint()
        self.waterPump._encode_one(buf)
        assert self.fan._get_packed_fingerprint() == mars_message.Component._get_packed_fingerprint()
        self.fan._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != CleanComponents._get_packed_fingerprint():
            raise ValueError("Decode error")
        return CleanComponents._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = CleanComponents()
        self.sideBrush = mars_message.Component._decode_one(buf)
        self.mainBrush = mars_message.Component._decode_one(buf)
        self.roller = mars_message.Component._decode_one(buf)
        self.waterTank = mars_message.Component._decode_one(buf)
        self.mop = mars_message.Component._decode_one(buf)
        self.waterPump = mars_message.Component._decode_one(buf)
        self.fan = mars_message.Component._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if CleanComponents in parents: return 0
        newparents = parents + [CleanComponents]
        tmphash = (0x10857288fd016a69+ mars_message.Component._get_hash_recursive(newparents)+ mars_message.Component._get_hash_recursive(newparents)+ mars_message.Component._get_hash_recursive(newparents)+ mars_message.Component._get_hash_recursive(newparents)+ mars_message.Component._get_hash_recursive(newparents)+ mars_message.Component._get_hash_recursive(newparents)+ mars_message.Component._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if CleanComponents._packed_fingerprint is None:
            CleanComponents._packed_fingerprint = struct.pack(">Q", CleanComponents._get_hash_recursive([]))
        return CleanComponents._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", CleanComponents._get_packed_fingerprint())[0]

